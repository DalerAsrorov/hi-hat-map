(function () {
'use strict';

// Initializing the map
// let mainMap = L.map('mapWrapper').setView([51.505, -0.09], 13);

// L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//     maxZoom: 19,
//     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
// }).addTo(mainMap);

var mapLayer = MQ.mapLayer();
var mainMap = void 0;

mainMap = L.map('mapWrapper', {
  layers: mapLayer,
  center: [40.731701, -73.993411],
  zoom: 12
});

L.control.layers({
  'Map': mapLayer,
  'Hybrid': MQ.hybridLayer(),
  'Satellite': MQ.satelliteLayer(),
  'Dark': MQ.darkLayer(),
  'Light': MQ.lightLayer()
}).addTo(mainMap);

var Map = mainMap;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var StorageSystem = function () {
    function StorageSystem(localStorage) {
        classCallCheck(this, StorageSystem);

        this._localStorage = localStorage;
    }

    createClass(StorageSystem, [{
        key: "getItem",
        value: function getItem(key) {
            return this._localStorage.getItem(key);
        }
    }, {
        key: "setItem",
        value: function setItem(key, value) {
            this._localStorage.setItem(key, value);
        }
    }]);
    return StorageSystem;
}();

// UI Utils set
function slideToggleCp(targetID, map) {
    var heightSetterID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'arrowPointerWrapper';
    var cpDefaultHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "35%";

    var cpNavHeight = document.getElementById(heightSetterID).offsetHeight.toString();
    var cpWrapperHeight = document.getElementById(targetID).offsetHeight.toString();
    var slidingTime = 270;
    var defaultTop = "-15px";
    var $querySearchForm = $('#querySearchForm');
    var $target = $('#' + targetID);
    var $body = $('body');
    var $slideSwitchIcon = $('#slideSwitchIcon');

    var storageSystem = new StorageSystem(window.localStorage);

    //
    if (cpWrapperHeight === cpNavHeight) {
        $body.css({ "overflowY": "auto" });
        $target.animate({ height: cpDefaultHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-15px"
        }, slidingTime);
        $slideSwitchIcon.addClass('glyphicon-menu-down').removeClass('glyphicon-menu-up');
        storageSystem.setItem("cpOpen", true);
    } else {
        $body.css({ "overflowY": "hidden" });
        $target.animate({ height: cpNavHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-34px"
        }, slidingTime);
        map.invalidateSize();
        $slideSwitchIcon.addClass('glyphicon-menu-up').removeClass('glyphicon-menu-down');
        storageSystem.setItem("cpOpen", false);
    }
}

/**
*  Helper UI method that will keep the
*  control panel closed faster.
*/


/**
*   Based on the given target (div) and data (list of
*   available options), place a table (or list) of
*   widgets.
*/


function addElementToPanel(panel, eventListener) {
    var htmlItemName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var htmlItem = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : $('<button></button>');
    var htmlItemClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'menu';
    var columnSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'col-lg-4';


    var $panel = $(panel);
    var $htmlItem = htmlItem;
    var $divCol = $('<div></div>');

    $htmlItem.addClass(htmlItemClass);
    $htmlItem.html('<span class="right-cp-name">' + htmlItemName + '</span>');
    $divCol.addClass(columnSize);

    $divCol.append($htmlItem);
    $panel.append($divCol);
}

// export function addTemp(container, image, text, milliseconds=50000) {

// }

function addClass(target, className) {
    $(target).addClass(className);
}

function removeClass(target, className) {
    $(target).removeClass(className);
}

function fadeOut(target, type) {
    var callbackHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    $(target).fadeOut(type, callbackHandler);
}

function removeElement(target) {
    $(target).remove();
}

function style(target, styleObject) {
    for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        rest[_key - 2] = arguments[_key];
    }

    console.log("style() rest:", rest);
    $(target).css(styleObject);
}

function getRequest(url) {
    return new Promise(function (res, rej) {
        $.get(url, function (data, status) {

            if (status === 'success') {
                console.log("Success");
                res(data);
            } else {
                rej("Couldn't get the file.");
            }
        });
    });
}

function getGeoTrends(latLongString) {
    return window.location.origin + "/api/twitter/geotrends/" + latLongString;
}

function execWithTimeout(callback, time) {
    setTimeout(callback, time);
}

// Action
window.onload = function (e) {
    e.preventDefault();
    var storageSystem = new StorageSystem(window.localStorage);
    var socket = io.connect('http://localhost:8000/');
    var cpOpen = void 0;

    console.log(storageSystem.getItem('firstVisit'));

    /* UNCOMMENT WHEN READY */
    if (!storageSystem.getItem('firstVisit')) {
        console.log('Comes here');
        removeClass('#initLoader', 'vanish');
        addClass('#initLoader', 'full-overlay');
        storageSystem.setItem("firstVisit", true);

        execWithTimeout(function () {
            fadeOut('#initLoader', 'slow', function (e) {
                return removeElement('#initLoader');
            });
        }, 3000);
    }

    cpOpen = storageSystem.getItem('cpOpen');
    console.log('cpOpen:::', cpOpen);
    if (cpOpen == 'false') {
        console.log("Should slide: cpOpen", cpOpen);
        slideToggleCp('controlPanelWrapper', Map);
    }

    

    $('#toggleSliderBtn').on('click', function (event) {
        console.log('CLICKED');
        slideToggleCp('controlPanelWrapper', Map);
    });

    // let input = document.getElementById('pac-input')
    new L.Control.GPlaceAutocomplete({
        position: 'topright',
        callback: function callback(location) {
            // object of google place is given
            console.log('Location given:', location);
            Map.panTo(location);
        }
    }).addTo(Map);

    socket.on('tweet', function (tweet) {
        console.log('Tweet: ', tweet);
    });

    // generation
    // ui.generateCpRightPanel('#panelWrapper', {});

    // Testing area
    var testGeo = '-25.2744,-133.7751'; // Australia
    // console.log('Path:', Paths.getGeoTrends(testGeo));
    console.log(getGeoTrends(testGeo));
    getRequest(getGeoTrends(testGeo)).then(function (data) {
        if (data.data) {
            var listOfTrends = data.data.trends;
            var geoData = data.geo;

            $("#querySearch").easyAutocomplete({
                data: listOfTrends,
                getValue: 'name',
                list: {
                    match: {
                        enabled: true
                    },
                    onShowListEvent: function onShowListEvent() {
                        switch (storageSystem.getItem('cpOpen')) {
                            case 'false':
                                $('.easy-autocomplete-container').addClass('autocomplete-top');
                                break;
                            case 'true':
                                $('.easy-autocomplete-container').removeClass('autocomplete-top');
                                break;
                            default:
                                $('.easy-autocomplete-container').removeClass('autocomplete-top');
                        }
                    }
                }
                // template: {
                //     type: "custom"
                //     // method: function(value, item) {
                //     //     return "<img src='" + item.icon + "' /> | " + item.type + " | " + value;
                //     // }
                // }
            });
        } else {
            console.log("no data", data);
        }

        (function () {
            for (var i = 0; i < 10; i++) {
                addElementToPanel('#panelCompRightWrapper', {}, "Button " + i, $('<button></button>'), 'menu btn btn-default', 'col-lg-4');
            }

            style(".wrapper", { backgroundColor: "black", color: "red" });
        })();
    }).catch(function (err) {
        console.log("Error request", err);
    });

    // Request.getRequest(Utils.getTrendsPlaces(lat, long))
    //     .then((data) => {
    //         console.log("Trends Data");
    //     })
};

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
