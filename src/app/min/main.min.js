(function () {
'use strict';

var _isPlaceholder = function _isPlaceholder(a) {
  return a != null &&
         typeof a === 'object' &&
         a['@@functional/placeholder'] === true;
};

/**
 * Optimized internal one-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
var _curry1 = function _curry1(fn) {
  return function f1(a) {
    if (arguments.length === 0 || _isPlaceholder(a)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
};

/**
 * Checks if the input value is `null` or `undefined`.
 *
 * @func
 * @memberOf R
 * @since v0.9.0
 * @category Type
 * @sig * -> Boolean
 * @param {*} x The value to test.
 * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.
 * @example
 *
 *      R.isNil(null); //=> true
 *      R.isNil(undefined); //=> true
 *      R.isNil(0); //=> false
 *      R.isNil([]); //=> false
 */
var isNil = _curry1(function isNil(x) { return x == null; });

// Initializing the map
// let mainMap = L.map('mapWrapper').setView([51.505, -0.09], 13);

// L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//     maxZoom: 19,
//     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
// }).addTo(mainMap);

var mapLayer = MQ.mapLayer();
var mainMap = void 0;

mainMap = L.map('mapWrapper', {
  layers: mapLayer,
  center: [40.731701, -73.993411],
  zoom: 12
});

L.control.layers({
  'Map': mapLayer,
  'Hybrid': MQ.hybridLayer(),
  'Satellite': MQ.satelliteLayer(),
  'Dark': MQ.darkLayer(),
  'Light': MQ.lightLayer()
}).addTo(mainMap);

var Map = mainMap;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();









var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};











var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};





var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/**
 *
 * Storage Base class
 *
 */

var Storage = function () {
   function Storage() {
      classCallCheck(this, Storage);
   }

   createClass(Storage, [{
      key: "getItem",
      value: function getItem(key) {}
   }, {
      key: "getRawItem",
      value: function getRawItem(key) {}
   }, {
      key: "setItem",
      value: function setItem(key, value) {}
   }, {
      key: "setRawItem",
      value: function setRawItem(key, value) {}
   }]);
   return Storage;
}();

var StorageSystem = function (_Storage) {
    inherits(StorageSystem, _Storage);

    function StorageSystem(localStorage) {
        classCallCheck(this, StorageSystem);

        var _this = possibleConstructorReturn(this, (StorageSystem.__proto__ || Object.getPrototypeOf(StorageSystem)).call(this));

        _this._localStorage = localStorage;
        return _this;
    }

    createClass(StorageSystem, [{
        key: 'getItem',
        value: function getItem(key) {
            return this._localStorage.getItem(key);
        }
    }, {
        key: 'getRawItem',
        value: function getRawItem(key) {
            return JSON.parse(this.getItem(key));
        }
    }, {
        key: 'setItem',
        value: function setItem(key, value) {
            this._localStorage.setItem(key, value);
        }
    }, {
        key: 'setRawItem',
        value: function setRawItem(key, value) {
            this.setItem(key, JSON.stringify(value));
        }
    }]);
    return StorageSystem;
}(Storage);

var Components = function () {
    function Components() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var list = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        classCallCheck(this, Components);

        this.id = id;
        this.name = name;
        this.list = list;
    }

    createClass(Components, [{
        key: 'add',
        value: function add(panelComponent) {
            this.list.push(panelComponent);
        }
    }, {
        key: 'remove',
        value: function remove(panelComponent) {
            for (var i = 0; i < this.list.length; i++) {
                if (this.list[i].id === panelComponent.id) {
                    this.list.splice(i, 1);
                }
            }
        }
    }, {
        key: 'get',
        value: function get$$1() {
            return this;
        }
    }, {
        key: 'getId',
        value: function getId() {
            return this.id;
        }
    }, {
        key: 'getName',
        value: function getName() {
            return this.name;
        }
    }, {
        key: 'getList',
        value: function getList() {
            return this.list;
        }
    }, {
        key: 'set',
        value: function set$$1(id, name, list) {
            this.id = id;
            this.name = name;
            this.list = list;
        }
    }, {
        key: 'setName',
        value: function setName(name) {
            this.name = name;
        }
    }, {
        key: 'setId',
        value: function setId(id) {
            this.id = id;
        }
    }, {
        key: 'setList',
        value: function setList(list) {
            this.list = list;
        }
    }, {
        key: 'toString',
        value: function toString() {
            return {
                id: this.id,
                name: this.name,
                list: this.list
            };
        }
    }]);
    return Components;
}();

/**
 * Tests whether or not an object is an array.
 *
 * @private
 * @param {*} val The object to test.
 * @return {Boolean} `true` if `val` is an array, `false` otherwise.
 * @example
 *
 *      _isArray([]); //=> true
 *      _isArray(null); //=> false
 *      _isArray({}); //=> false
 */
var _isArray = Array.isArray || function _isArray(val) {
  return (val != null &&
          val.length >= 0 &&
          Object.prototype.toString.call(val) === '[object Array]');
};

/**
 * This checks whether a function has a [methodname] function. If it isn't an
 * array it will execute that function otherwise it will default to the ramda
 * implementation.
 *
 * @private
 * @param {Function} fn ramda implemtation
 * @param {String} methodname property to check for a custom implementation
 * @return {Object} Whatever the return value of the method is.
 */
var _checkForMethod = function _checkForMethod(methodname, fn) {
  return function() {
    var length = arguments.length;
    if (length === 0) {
      return fn();
    }
    var obj = arguments[length - 1];
    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?
      fn.apply(this, arguments) :
      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
  };
};

/**
 * Optimized internal two-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
var _curry2 = function _curry2(fn) {
  return function f2(a, b) {
    switch (arguments.length) {
      case 0:
        return f2;
      case 1:
        return _isPlaceholder(a) ? f2
             : _curry1(function(_b) { return fn(a, _b); });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f2
             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })
             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })
             : fn(a, b);
    }
  };
};

/**
 * Optimized internal three-arity curry function.
 *
 * @private
 * @category Function
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
var _curry3 = function _curry3(fn) {
  return function f3(a, b, c) {
    switch (arguments.length) {
      case 0:
        return f3;
      case 1:
        return _isPlaceholder(a) ? f3
             : _curry2(function(_b, _c) { return fn(a, _b, _c); });
      case 2:
        return _isPlaceholder(a) && _isPlaceholder(b) ? f3
             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })
             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })
             : _curry1(function(_c) { return fn(a, b, _c); });
      default:
        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3
             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })
             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })
             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })
             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })
             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })
             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })
             : fn(a, b, c);
    }
  };
};

/**
 * Returns the elements of the given list or string (or object with a `slice`
 * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
 *
 * Dispatches to the `slice` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.4
 * @category List
 * @sig Number -> Number -> [a] -> [a]
 * @sig Number -> Number -> String -> String
 * @param {Number} fromIndex The start index (inclusive).
 * @param {Number} toIndex The end index (exclusive).
 * @param {*} list
 * @return {*}
 * @example
 *
 *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
 *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
 *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
 *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
 *      R.slice(0, 3, 'ramda');                     //=> 'ram'
 */
var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
  return Array.prototype.slice.call(list, fromIndex, toIndex);
}));

/**
 * Returns a copy of the list, sorted according to the comparator function,
 * which should accept two values at a time and return a negative number if the
 * first value is smaller, a positive number if it's larger, and zero if they
 * are equal. Please note that this is a **copy** of the list. It does not
 * modify the original.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig (a,a -> Number) -> [a] -> [a]
 * @param {Function} comparator A sorting function :: a -> b -> Int
 * @param {Array} list The list to sort
 * @return {Array} a new array with its elements sorted by the comparator function.
 * @example
 *
 *      var diff = function(a, b) { return a - b; };
 *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]
 */
var sort = _curry2(function sort(comparator, list) {
  return Array.prototype.slice.call(list, 0).sort(comparator);
});

/**
 * Sorts the list according to the supplied function.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord b => (a -> b) -> [a] -> [a]
 * @param {Function} fn
 * @param {Array} list The list to sort.
 * @return {Array} A new list sorted by the keys generated by `fn`.
 * @example
 *
 *      var sortByFirstItem = R.sortBy(R.prop(0));
 *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));
 *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];
 *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]
 *      var alice = {
 *        name: 'ALICE',
 *        age: 101
 *      };
 *      var bob = {
 *        name: 'Bob',
 *        age: -10
 *      };
 *      var clara = {
 *        name: 'clara',
 *        age: 314.159
 *      };
 *      var people = [clara, bob, alice];
 *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]
 */
var sortBy = _curry2(function sortBy(fn, list) {
  return Array.prototype.slice.call(list, 0).sort(function(a, b) {
    var aa = fn(a);
    var bb = fn(b);
    return aa < bb ? -1 : aa > bb ? 1 : 0;
  });
});

/**
 * Returns a function that when supplied an object returns the indicated
 * property of that object, if it exists.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig s -> {s: a} -> a | Undefined
 * @param {String} p The property name
 * @param {Object} obj The object to query
 * @return {*} The value at `obj.p`.
 * @see R.path
 * @example
 *
 *      R.prop('x', {x: 100}); //=> 100
 *      R.prop('x', {}); //=> undefined
 */
var prop = _curry2(function prop(p, obj) { return obj[p]; });

/**
 * Returns `true` if the first argument is greater than the second; `false`
 * otherwise.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Relation
 * @sig Ord a => a -> a -> Boolean
 * @param {*} a
 * @param {*} b
 * @return {Boolean}
 * @see R.lt
 * @example
 *
 *      R.gt(2, 1); //=> true
 *      R.gt(2, 2); //=> false
 *      R.gt(2, 3); //=> false
 *      R.gt('a', 'z'); //=> false
 *      R.gt('z', 'a'); //=> true
 */
var gt = _curry2(function gt(a, b) { return a > b; });

/**
 * Makes a comparator function out of a function that reports whether the first
 * element is less than the second.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (a, b -> Boolean) -> (a, b -> Number)
 * @param {Function} pred A predicate function of arity two which will return `true` if the first argument
 * is less than the second, `false` otherwise
 * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`
 * @example
 *
 *      var byAge = R.comparator((a, b) => a.age < b.age);
 *      var people = [
 *        // ...
 *      ];
 *      var peopleByIncreasingAge = R.sort(byAge, people);
 */
var comparator = _curry1(function comparator(pred) {
  return function(a, b) {
    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;
  };
});

var PanelComponent = function () {
    function PanelComponent(id, name, actionHandler) {
        var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
        classCallCheck(this, PanelComponent);

        this.id = id;
        this.name = name;
        this.actionHandler = actionHandler;
        this.data = data;
    }

    createClass(PanelComponent, [{
        key: "getSotedDataBy",
        value: function getSotedDataBy(key) {
            var ascending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var sortedData = void 0;
            var descComparator = comparator(function (a, b) {
                return gt(prop(key, a), prop(key, b));
            });

            sortedData = ascending ? sortBy(prop(key), this.data) : sort(descComparator, this.data);
            return data;
        }
    }, {
        key: "getTopN",
        value: function getTopN(limit, key) {
            var ascending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var formatted = getSortedDataBy(key, ascending);
            return slice(0, limit + 1, formatted);
        }
    }, {
        key: "getActionHandler",
        value: function getActionHandler() {
            return this.actionHandler;
        }
    }, {
        key: "getData",
        value: function getData() {
            return this.data;
        }
    }, {
        key: "getId",
        value: function getId() {
            return this.id;
        }
    }, {
        key: "getName",
        value: function getName(name) {
            this.name = name;
        }
    }, {
        key: "setActionHandler",
        value: function setActionHandler(actionHandler) {
            this.actionHandler = actionHandler;
        }
    }, {
        key: "setActionHandler",
        value: function setActionHandler(fn) {
            this.actionHandler = fn;
        }
    }, {
        key: "setData",
        value: function setData(data) {
            this.data = data;
        }
    }, {
        key: "setName",
        value: function setName(name) {
            this.name = name;
        }
    }, {
        key: "toString",
        value: function toString() {
            return {
                "id": this.id,
                "name": this.name,
                "actionHandler": this.actionHandler,
                "data": this.data
            };
        }
    }]);
    return PanelComponent;
}(); /**
      *
      * Control class for handing control panel events
      *
      */

var ContextMenu = function () {
    function ContextMenu(id, parent) {
        classCallCheck(this, ContextMenu);

        this.id = id;
        this.parent = parent;
        id = id.indexOf('#') === 0 ? id.substr(1) : id;
        this.$self = $('<div id=' + id + '></div>');
        this.$parent = $(parent);

        // add class context-menu for all
        // context menu elements.
        this.addClass('context-menu');
    }

    createClass(ContextMenu, [{
        key: 'addClass',
        value: function addClass$$1(className) {
            var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            // have data-name attribute added
            selector = selector === null ? !!this.$self.addClass(className) : !!$('' + selector).addClass(className);
            return selector;
        }
    }, {
        key: 'adjustPosition',
        value: function adjustPosition(event) {
            var mouseX = event.clientX;
            var mouseY = event.clientY;

            var left = mouseX + 'px';

            var nav = document.getElementsByTagName('nav')[0];
            var navOffsetHeight = nav.offsetHeight;
            var top = mouseY - navOffsetHeight + 'px';

            this.applyCss({ 'left': left, 'top': top });

            console.log('adjustPosition event applied', event);
        }
    }, {
        key: 'addMenuSubitem',
        value: function addMenuSubitem(selfSelector, menuItemSelector, eventListener) {}
    }, {
        key: 'addMenuItem',
        value: function addMenuItem(selector, eventListener) {
            this.appendMenuItem({ selector: selector, eventListener: eventListener });
        }
    }, {
        key: 'appendMenuItem',
        value: function appendMenuItem(params) {
            var selector = params.selector;
            var eventListener = params.eventListener;
        }
    }, {
        key: 'applyCss',
        value: function applyCss(styleObject) {
            this.$self.css(styleObject);
        }

        // 1. Invoke this method at the end to add
        // the context menu to the container.
        // 2. Make sure to leave it invisible first
        // 3. Have method that shows the dropdowns
        //    on right click.
        // 4. Don't forget to add handler for 'left click'
        //    to hide the context menu

    }, {
        key: 'bind',
        value: function bind() {
            this.$parent.append(this.$self);
            resetOnMuseUp(document, this.id, 'click');
        }
    }, {
        key: 'fadeIn',
        value: function fadeIn(speed) {
            this.$self.fadeIn(speed);
        }
    }, {
        key: 'fadeOut',
        value: function fadeOut$$1(speed) {
            this.$self.fadeOut(speed);
        }
    }, {
        key: '$html',
        value: function $html() {
            return this.$self;
        }
    }, {
        key: 'hide',
        value: function hide() {
            var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;

            this.$self.hide(delay);
        }
    }, {
        key: 'refresh',
        value: function refresh() {}
    }, {
        key: 'show',
        value: function show() {
            var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;

            this.$self.show(delay);
        }
    }, {
        key: 'id',
        get: function get$$1() {
            return this._id;
        },
        set: function set$$1(id) {
            this._id = id;
        }
    }]);
    return ContextMenu;
}();

function getType(object) {
  return Object.prototype.toString.call(object);
}

function titleCase(str) {
  var escapeReg = function escapeReg(s) {
    return s.replace(/./g, function (c) {
      return '\\' + c;
    });
  };
  var wordPattern = new RegExp('[^' + escapeReg(' _-¡¿/') + ']+', 'g');
  var result = str.replace(wordPattern, capitalize);
  return result;
}





function capitalize(str) {
  if (str.length) {
    return str[0].toUpperCase() + str.slice(1).toLowerCase();
  } else {
    return '';
  }
}

/*----------  Utils Module functions  ----------*/

function slideToggleCp(targetID, map) {
    var heightSetterID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'arrowPointerWrapper';
    var cpDefaultHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "35%";

    var cpNavHeight = document.getElementById(heightSetterID).offsetHeight.toString();
    var cpWrapperHeight = document.getElementById(targetID).offsetHeight.toString();
    var slidingTime = 270;
    var defaultTop = "-15px";
    var $querySearchForm = $('#querySearchForm');
    var $target = $('#' + targetID);
    var $body = $('body');
    var $slideSwitchIcon = $('#slideSwitchIcon');

    var storageSystem = new StorageSystem(window.localStorage);

    //
    if (cpWrapperHeight === cpNavHeight) {
        $body.css({ "overflowY": "auto" });
        $target.animate({ height: cpDefaultHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-15px"
        }, slidingTime);
        $slideSwitchIcon.addClass('fa-caret-down').removeClass('fa-caret-up');
        storageSystem.setItem("cpOpen", true);
    } else {
        $body.css({ "overflowY": "hidden" });
        $target.animate({ height: cpNavHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-37px"
        }, slidingTime);
        map.invalidateSize();
        $slideSwitchIcon.addClass('fa-caret-up').removeClass('fa-caret-down');
        storageSystem.setItem("cpOpen", false);
    }
}

/**
*  Helper UI method that will keep the
*  control panel closed faster.
*/


/**
*   Based on the given target (div) and data (list of
*   available options), place a table (or list) of
*   widgets.
*/








function addClass(target, className) {
    $(target).addClass(className);
}



function removeClass(target, className) {
    $(target).removeClass(className);
}

function addEventListenerTo(target, event, fn) {
    var targetType = getType(target);

    if (targetType === '[object Window]' || targetType === '[object HTMLDocument]') {
        target.addEventListener(event, fn);
    } else {
        document.getElementById(target).addEventListener(event, fn);
    }
}

function removeElement(target) {
    $(target).remove();
}



function fadeOut(target) {
    var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    $(target).fadeOut(timer, function () {
        // $('#initLoader').remove();
        // $('#mainWrapper').css({opacity: 0.0, visibility: "visible"}).animate({opacity: 1}, 1000);
        callback();
    });
}

function makeVisible(target, timer) {
    $(target).css({ opacity: 0.0, visibility: "visible" }).animate({ opacity: 1 }, timer);
}



function appendDropDownTo(target, dropdownName, dropdownID, actionsList) {
    // console.log("HERE", dropdownName, " HERE ", dropdownID, " HERE ", actionsList);
    var $targetRef = $(target).append('<div class="dropdown" id=' + dropdownID + '></div>');
    var $dropdown = $(target).find('#' + dropdownID);
    $dropdown.append('<button class=\'btn btn-secondary dropdown-toggle\' type=\'button\' data-toggle="dropdown">' + dropdownName + '</button>');
    var $dropdownRef = $dropdown.append('<div class=\'dropdown-menu\' </div>');
    var $listDiv = $dropdownRef.find('.dropdown-menu');

    var $ul = $('<ul></ul>');

    actionsList.map(function (action, index) {
        $ul.append('\n            <li class=\'sup-li\'>\n                <a class =\'list-group-item list-group-item-action\' id=\'' + action.id + '\' href=\'#\'> ' + action.name + ' </a>\n            </li>\n        ');
    });

    $listDiv.append($ul);
    $dropdown.append($listDiv);
    $(target).append($dropdown);
}

function appendRangeSlider(container, divClass, inputId, params) {
    var newRangeSlider = $('<div class=\'' + divClass + '\'>\n                            <input id=\'' + inputId + '\' type=\'text\'\n                             />\n                       </div>');
    var rangeInput = newRangeSlider.find('input');
    rangeInput.slider({
        ticks: params.ticks,
        ticks_labels: params.ticksLabels,
        min: params.min,
        max: params.max,
        step: params.step,
        value: params.value,
        tooltip: params.tooltip
    });

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = Object.entries(params.eventHandlers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = slicedToArray(_step.value, 2),
                key = _step$value[0],
                value = _step$value[1];

            // key == event and value == handler
            rangeInput.on(key, value);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    

    appendTo(container, newRangeSlider);
    rangeInput.slider('refresh');

    console.log('Range slider with divClass \'' + divClass + '\'\' is appended to \'' + container + '\'', appendTo('' + container, newRangeSlider));
}



function appendTo(container, element) {
    return !!$('' + container).append(element);
}

function appendDropDownToPanel(target, componentsClass) {
    console.log("componentsClass.list:", componentsClass.list);
    appendDropDownTo(target, componentsClass.name, componentsClass.id, componentsClass.list);
}

function onSubmit(target, callback) {
    $(target).submit(callback);
}

function getInputValue(target) {
    return $(target).val();
}

function addContextMenuTo(target, contextMenuId, eventType) {
    var $target = $(target);
    var contextMenu = new ContextMenu(contextMenuId, target);

    $target.bind(eventType, function (event) {
        event.preventDefault();
        contextMenu.adjustPosition(event);
        contextMenu.fadeIn(200);
    });

    console.log('contextMenu:', contextMenu);
    return contextMenu;
}

function resetOnMuseUp(target, containerSelector, actionName) {
    var container = $('' + containerSelector);
    $(target).mouseup(function (e) {
        if (!container.is(e.target) && container.has(e.target).length === 0) {
            fadeOut(containerSelector, 100);
            container.unbind(actionName, target);
        }
    });
}

function getRequest(url) {
    return new Promise(function (res, rej) {
        $.get(url, function (data, status) {

            if (status === 'success') {
                console.log("Success");
                res(data);
            } else {
                rej("Couldn't get the file.");
            }
        });
    });
}

function postRequest(url, info) {
    return new Promise(function (res, rej) {
        $.post(url, info, function (data, status) {
            if (status === 'success') {
                res(data);
            } else {
                rej("Unsuccessful POST request.");
            }
        });
    });
}

function getGeoTrends(latLongString) {
    return window.location.origin + "/api/twitter/geotrends/" + latLongString;
}

function getTwitData() {
    return window.location.origin + "/api/twitter/twitdata";
}

function getSentimentTextAnalysis() {
    return window.location.origin + "/api/sentiment/evaluatestring";
}

var _isTransformer = function _isTransformer(obj) {
  return typeof obj['@@transducer/step'] === 'function';
};

/**
 * Returns a function that dispatches with different strategies based on the
 * object in list position (last argument). If it is an array, executes [fn].
 * Otherwise, if it has a function with one of the given method names, it will
 * execute that function (functor case). Otherwise, if it is a transformer,
 * uses transducer [xf] to return a new transformer (transducer case).
 * Otherwise, it will default to executing [fn].
 *
 * @private
 * @param {Array} methodNames properties to check for a custom implementation
 * @param {Function} xf transducer to initialize if object is transformer
 * @param {Function} fn default ramda implementation
 * @return {Function} A function that dispatches on object in list position
 */
var _dispatchable = function _dispatchable(methodNames, xf, fn) {
  return function() {
    if (arguments.length === 0) {
      return fn();
    }
    var args = Array.prototype.slice.call(arguments, 0);
    var obj = args.pop();
    if (!_isArray(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === 'function') {
          return obj[methodNames[idx]].apply(obj, args);
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = xf.apply(null, args);
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
};

var _map = function _map(fn, functor) {
  var idx = 0;
  var len = functor.length;
  var result = Array(len);
  while (idx < len) {
    result[idx] = fn(functor[idx]);
    idx += 1;
  }
  return result;
};

var _xwrap = (function() {
  function XWrap(fn) {
    this.f = fn;
  }
  XWrap.prototype['@@transducer/init'] = function() {
    throw new Error('init not implemented on XWrap');
  };
  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };
  XWrap.prototype['@@transducer/step'] = function(acc, x) {
    return this.f(acc, x);
  };

  return function _xwrap(fn) { return new XWrap(fn); };
}());

var _arity = function _arity(n, fn) {
  /* eslint-disable no-unused-vars */
  switch (n) {
    case 0: return function() { return fn.apply(this, arguments); };
    case 1: return function(a0) { return fn.apply(this, arguments); };
    case 2: return function(a0, a1) { return fn.apply(this, arguments); };
    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };
    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };
    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };
    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };
    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };
    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };
    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };
    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };
    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
  }
};

/**
 * Creates a function that is bound to a context.
 * Note: `R.bind` does not provide the additional argument-binding capabilities of
 * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
 *
 * @func
 * @memberOf R
 * @since v0.6.0
 * @category Function
 * @category Object
 * @sig (* -> *) -> {*} -> (* -> *)
 * @param {Function} fn The function to bind to context
 * @param {Object} thisObj The context to bind `fn` to
 * @return {Function} A function that will execute in the context of `thisObj`.
 * @see R.partial
 * @example
 *
 *      var log = R.bind(console.log, console);
 *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
 *      // logs {a: 2}
 * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
 */
var bind = _curry2(function bind(fn, thisObj) {
  return _arity(fn.length, function() {
    return fn.apply(thisObj, arguments);
  });
});

var _isString = function _isString(x) {
  return Object.prototype.toString.call(x) === '[object String]';
};

/**
 * Tests whether or not an object is similar to an array.
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Type
 * @category List
 * @sig * -> Boolean
 * @param {*} x The object to test.
 * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
 * @deprecated since v0.23.0
 * @example
 *
 *      R.isArrayLike([]); //=> true
 *      R.isArrayLike(true); //=> false
 *      R.isArrayLike({}); //=> false
 *      R.isArrayLike({length: 10}); //=> false
 *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
 */
var isArrayLike = _curry1(function isArrayLike(x) {
  if (_isArray(x)) { return true; }
  if (!x) { return false; }
  if (typeof x !== 'object') { return false; }
  if (_isString(x)) { return false; }
  if (x.nodeType === 1) { return !!x.length; }
  if (x.length === 0) { return true; }
  if (x.length > 0) {
    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
  }
  return false;
});

var _reduce = (function() {
  function _arrayReduce(xf, acc, list) {
    var idx = 0;
    var len = list.length;
    while (idx < len) {
      acc = xf['@@transducer/step'](acc, list[idx]);
      if (acc && acc['@@transducer/reduced']) {
        acc = acc['@@transducer/value'];
        break;
      }
      idx += 1;
    }
    return xf['@@transducer/result'](acc);
  }

  function _iterableReduce(xf, acc, iter) {
    var step = iter.next();
    while (!step.done) {
      acc = xf['@@transducer/step'](acc, step.value);
      if (acc && acc['@@transducer/reduced']) {
        acc = acc['@@transducer/value'];
        break;
      }
      step = iter.next();
    }
    return xf['@@transducer/result'](acc);
  }

  function _methodReduce(xf, acc, obj) {
    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));
  }

  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';
  return function _reduce(fn, acc, list) {
    if (typeof fn === 'function') {
      fn = _xwrap(fn);
    }
    if (isArrayLike(list)) {
      return _arrayReduce(fn, acc, list);
    }
    if (typeof list.reduce === 'function') {
      return _methodReduce(fn, acc, list);
    }
    if (list[symIterator] != null) {
      return _iterableReduce(fn, acc, list[symIterator]());
    }
    if (typeof list.next === 'function') {
      return _iterableReduce(fn, acc, list);
    }
    throw new TypeError('reduce: list must be array or iterable');
  };
}());

var _xfBase = {
  init: function() {
    return this.xf['@@transducer/init']();
  },
  result: function(result) {
    return this.xf['@@transducer/result'](result);
  }
};

var _xmap = (function() {
  function XMap(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XMap.prototype['@@transducer/init'] = _xfBase.init;
  XMap.prototype['@@transducer/result'] = _xfBase.result;
  XMap.prototype['@@transducer/step'] = function(result, input) {
    return this.xf['@@transducer/step'](result, this.f(input));
  };

  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });
}());

/**
 * Internal curryN function.
 *
 * @private
 * @category Function
 * @param {Number} length The arity of the curried function.
 * @param {Array} received An array of arguments received thus far.
 * @param {Function} fn The function to curry.
 * @return {Function} The curried function.
 */
var _curryN = function _curryN(length, received, fn) {
  return function() {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length &&
          (!_isPlaceholder(received[combinedIdx]) ||
           argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!_isPlaceholder(result)) {
        left -= 1;
      }
      combinedIdx += 1;
    }
    return left <= 0 ? fn.apply(this, combined)
                     : _arity(left, _curryN(length, combined, fn));
  };
};

/**
 * Returns a curried equivalent of the provided function, with the specified
 * arity. The curried function has two unusual capabilities. First, its
 * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value `R.__` may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
 * following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.5.0
 * @category Function
 * @sig Number -> (* -> a) -> (* -> a)
 * @param {Number} length The arity for the returned function.
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curry
 * @example
 *
 *      var sumArgs = (...args) => R.sum(args);
 *
 *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
var curryN = _curry2(function curryN(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }
  return _arity(length, _curryN(length, [], fn));
});

var _has = function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};

var _isArguments = (function() {
  var toString = Object.prototype.toString;
  return toString.call(arguments) === '[object Arguments]' ?
    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :
    function _isArguments(x) { return _has('callee', x); };
}());

/**
 * Returns a list containing the names of all the enumerable own properties of
 * the supplied object.
 * Note that the order of the output array is not guaranteed to be consistent
 * across different JS platforms.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Object
 * @sig {k: v} -> [k]
 * @param {Object} obj The object to extract properties from
 * @return {Array} An array of the object's own properties.
 * @example
 *
 *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
 */
var keys = (function() {
  // cover IE < 9 keys issues
  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');
  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',
                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
  // Safari bug
  var hasArgsEnumBug = (function() {
    'use strict';
    return arguments.propertyIsEnumerable('length');
  }());

  var contains = function contains(list, item) {
    var idx = 0;
    while (idx < list.length) {
      if (list[idx] === item) {
        return true;
      }
      idx += 1;
    }
    return false;
  };

  return typeof Object.keys === 'function' && !hasArgsEnumBug ?
    _curry1(function keys(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    }) :
    _curry1(function keys(obj) {
      if (Object(obj) !== obj) {
        return [];
      }
      var prop, nIdx;
      var ks = [];
      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
      for (prop in obj) {
        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
          ks[ks.length] = prop;
        }
      }
      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;
        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];
          if (_has(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }
          nIdx -= 1;
        }
      }
      return ks;
    });
}());

/**
 * Takes a function and
 * a [functor](https://github.com/fantasyland/fantasy-land#functor),
 * applies the function to each of the functor's values, and returns
 * a functor of the same shape.
 *
 * Ramda provides suitable `map` implementations for `Array` and `Object`,
 * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
 *
 * Dispatches to the `map` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * Also treats functions as functors and will compose them together.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Functor f => (a -> b) -> f a -> f b
 * @param {Function} fn The function to be called on every element of the input `list`.
 * @param {Array} list The list to be iterated over.
 * @return {Array} The new list.
 * @see R.transduce, R.addIndex
 * @example
 *
 *      var double = x => x * 2;
 *
 *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
 *
 *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
 * @symb R.map(f, [a, b]) = [f(a), f(b)]
 * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
 * @symb R.map(f, functor_o) = functor_o.map(f)
 */
var map = _curry2(_dispatchable(['map'], _xmap, function map(fn, functor) {
  switch (Object.prototype.toString.call(functor)) {
    case '[object Function]':
      return curryN(functor.length, function() {
        return fn.call(this, functor.apply(this, arguments));
      });
    case '[object Object]':
      return _reduce(function(acc, key) {
        acc[key] = fn(functor[key]);
        return acc;
      }, {}, keys(functor));
    default:
      return _map(fn, functor);
  }
}));

var _pipe = function _pipe(f, g) {
  return function() {
    return g.call(this, f.apply(this, arguments));
  };
};

/**
 * Returns a single item by iterating through the list, successively calling
 * the iterator function and passing it an accumulator value and the current
 * value from the array, and then passing the result to the next call.
 *
 * The iterator function receives two values: *(acc, value)*. It may use
 * `R.reduced` to shortcut the iteration.
 *
 * The arguments' order of `reduceRight`'s iterator function is *(value, acc)*.
 *
 * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
 * arrays), unlike the native `Array.prototype.reduce` method. For more details
 * on this behavior, see:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
 *
 * Dispatches to the `reduce` method of the third argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig ((a, b) -> a) -> a -> [b] -> a
 * @param {Function} fn The iterator function. Receives two values, the accumulator and the
 *        current element from the array.
 * @param {*} acc The accumulator value.
 * @param {Array} list The list to iterate over.
 * @return {*} The final, accumulated value.
 * @see R.reduced, R.addIndex, R.reduceRight
 * @example
 *
 *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
 *                -               -10
 *               / \              / \
 *              -   4           -6   4
 *             / \              / \
 *            -   3   ==>     -3   3
 *           / \              / \
 *          -   2           -1   2
 *         / \              / \
 *        0   1            0   1
 *
 * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
 */
var reduce = _curry3(_reduce);

/**
 * Returns all but the first element of the given list or string (or object
 * with a `tail` method).
 *
 * Dispatches to the `slice` method of the first argument, if present.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig [a] -> [a]
 * @sig String -> String
 * @param {*} list
 * @return {*}
 * @see R.head, R.init, R.last
 * @example
 *
 *      R.tail([1, 2, 3]);  //=> [2, 3]
 *      R.tail([1, 2]);     //=> [2]
 *      R.tail([1]);        //=> []
 *      R.tail([]);         //=> []
 *
 *      R.tail('abc');  //=> 'bc'
 *      R.tail('ab');   //=> 'b'
 *      R.tail('a');    //=> ''
 *      R.tail('');     //=> ''
 */
var tail = _curry1(_checkForMethod('tail', slice(1, Infinity)));

/**
 * Performs left-to-right function composition. The leftmost function may have
 * any arity; the remaining functions must be unary.
 *
 * In some libraries this function is named `sequence`.
 *
 * **Note:** The result of pipe is not automatically curried.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
 * @param {...Function} functions
 * @return {Function}
 * @see R.compose
 * @example
 *
 *      var f = R.pipe(Math.pow, R.negate, R.inc);
 *
 *      f(3, 4); // -(3^4) + 1
 * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
 */
var pipe = function pipe() {
  if (arguments.length === 0) {
    throw new Error('pipe requires at least one argument');
  }
  return _arity(arguments[0].length,
                reduce(_pipe, arguments[0], tail(arguments)));
};

/**
 * Returns a curried equivalent of the provided function. The curried function
 * has two unusual capabilities. First, its arguments needn't be provided one
 * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
 * following are equivalent:
 *
 *   - `g(1)(2)(3)`
 *   - `g(1)(2, 3)`
 *   - `g(1, 2)(3)`
 *   - `g(1, 2, 3)`
 *
 * Secondly, the special placeholder value `R.__` may be used to specify
 * "gaps", allowing partial application of any combination of arguments,
 * regardless of their positions. If `g` is as above and `_` is `R.__`, the
 * following are equivalent:
 *
 *   - `g(1, 2, 3)`
 *   - `g(_, 2, 3)(1)`
 *   - `g(_, _, 3)(1)(2)`
 *   - `g(_, _, 3)(1, 2)`
 *   - `g(_, 2)(1)(3)`
 *   - `g(_, 2)(1, 3)`
 *   - `g(_, 2)(_, 3)(1)`
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category Function
 * @sig (* -> a) -> (* -> a)
 * @param {Function} fn The function to curry.
 * @return {Function} A new, curried function.
 * @see R.curryN
 * @example
 *
 *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
 *
 *      var curriedAddFourNumbers = R.curry(addFourNumbers);
 *      var f = curriedAddFourNumbers(1, 2);
 *      var g = f(3);
 *      g(4); //=> 10
 */
var curry$1 = _curry1(function curry(fn) {
  return curryN(fn.length, fn);
});

var MAIN = {
    TWITTER_MODES: ['real_time', 'specified_time'],
    TWITTER_MODES_INDEX: {
        'real_time': 0,
        'specified_time': 1
    }
};

var IMAGES = {
    SOC_MEDIA_ICONS: {
        TWITTER: '../../img/icons/twitter_i.png',
        YELP: '',
        FOURSQARE: ''
    }
};

function createIcon(iconUrl) {
    var shadowUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
    var iconSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [38, 95];
    var shadowSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [50, 64];
    var iconAnchor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [22, 94];
    var shadowIcon = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [4, 62];
    var popupAnchor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [-3, -76];

    var twitterIcon = L.icon({
        iconUrl: iconUrl,
        // shadowUrl: IMAGES.SOC_MEDIA_ICONS.TWITTER,

        iconSize: iconSize, // size of the icon
        shadowSize: shadowSize, // size of the shadow
        iconAnchor: iconAnchor, // point of the icon which will correspond to marker's location
        shadowAnchor: shadowIcon, // the same for the shadow
        popupAnchor: popupAnchor // point from which the popup should open relative to the iconAnchor
    });

    console.log('Icon Object: ', twitterIcon);

    return twitterIcon;
}

var Leaflet = function () {
    function Leaflet() {
        classCallCheck(this, Leaflet);
    }

    createClass(Leaflet, [{
        key: "createPopup",
        value: function createPopup(latlng, content) {
            return L.popup().setLatLng(latlng).setContent(content);
        }
    }, {
        key: "computePolygonCenter",
        value: function computePolygonCenter(L, boundingBox) {
            var polygonPoints = [],
                polygon = void 0;
            var coordinates = boundingBox.coordinates[0];

            coordinates.forEach(function (coordinate) {
                var latlng = L.latLng(coordinate[1], coordinate[0]);
                polygonPoints.push(latlng);
            });
            polygon = L.polygon(polygonPoints);

            return polygon.getBounds().getCenter();
        }
    }, {
        key: "transformLatLngToArray",
        value: function transformLatLngToArray(center) {
            return [center.lng, center.lat];
        }
    }]);
    return Leaflet;
}();

// export function generateResults(data) {
//     console.log('Data', data);
// }

// export function animateTransition(data) {
//     console.log("")
// }

var generateResults = curry$1(function (data) {
    pipe(map(drawObject))(data);
});

var renderObject = function renderObject(_renderObject) {
    var data = _renderObject.data;
    var sentiment = _renderObject.sentiment;
    var type = _renderObject.type;
    var geolocation = _renderObject.data.geo;

    var dataWrapper = {
        data: data,
        sentiment: sentiment
    };

    drawObject(dataWrapper, geolocation, type);
};

var drawObject = curry$1(function (data, geolocation, iconType) {
    var icon = void 0,
        latlng = void 0,
        popup = void 0;

    switch (iconType) {
        case 'twitter':
            console.log('data, geo, icon:', data, geolocation, iconType);

            // bindPopup( <String> html | <HTMLElement> el | <Popup> popup, <Popup options> options? )

            icon = createIcon(IMAGES.SOC_MEDIA_ICONS.TWITTER);
            latlng = L.latLng(geolocation[1], geolocation[0]);

            var leaflet = new Leaflet();
            popup = leaflet.createPopup(latlng, '<p>Hello world!<br />This is a nice popup.</p>');

            L.marker([geolocation[1], geolocation[0]], {
                icon: icon,
                title: 'Tweet',
                alt: 'Tweet in (' + geolocation[1] + ', ' + geolocation[0] + ')',
                riseOnHover: true
            }).bindPopup(popup).openPopup().addTo(Map);

            break;
        case 'yelp':
            console.log('Yelp data, geo, icon', data, geolocation, iconType);
            break;
        default:
            console.log('No soc media was selected.');
    }
});

var _filter = function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];

  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
};

var _isObject = function _isObject(x) {
  return Object.prototype.toString.call(x) === '[object Object]';
};

var _xfilter = (function() {
  function XFilter(f, xf) {
    this.xf = xf;
    this.f = f;
  }
  XFilter.prototype['@@transducer/init'] = _xfBase.init;
  XFilter.prototype['@@transducer/result'] = _xfBase.result;
  XFilter.prototype['@@transducer/step'] = function(result, input) {
    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
  };

  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });
}());

/**
 * Takes a predicate and a "filterable", and returns a new filterable of the
 * same type containing the members of the given filterable which satisfy the
 * given predicate.
 *
 * Dispatches to the `filter` method of the second argument, if present.
 *
 * Acts as a transducer if a transformer is given in list position.
 *
 * @func
 * @memberOf R
 * @since v0.1.0
 * @category List
 * @sig Filterable f => (a -> Boolean) -> f a -> f a
 * @param {Function} pred
 * @param {Array} filterable
 * @return {Array}
 * @see R.reject, R.transduce, R.addIndex
 * @example
 *
 *      var isEven = n => n % 2 === 0;
 *
 *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
 *
 *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
 */
var filter = _curry2(_dispatchable(['filter'], _xfilter, function(pred, filterable) {
  return (
    _isObject(filterable) ?
      _reduce(function(acc, key) {
        if (pred(filterable[key])) {
          acc[key] = filterable[key];
        }
        return acc;
      }, {}, keys(filterable)) :
    // else
      _filter(pred, filterable)
  );
}));

var Mode = function () {
    function Mode(name) {
        classCallCheck(this, Mode);

        this.name = name;
    }

    createClass(Mode, [{
        key: "getName",
        value: function getName() {
            return this.name;
        }
    }, {
        key: "setName",
        value: function setName(name) {
            this.name = name;
        }
    }]);
    return Mode;
}();

/*=============================================
=            Sentiment class             =
Makes requests to the sentiment API and does
additional processing of the sentiment if needed.
=============================================*/

/*=====  Sentiment Class source  ======*/

var Sentiment = function () {
    function Sentiment(id) {
        classCallCheck(this, Sentiment);

        this.id = id;
    }

    createClass(Sentiment, [{
        key: 'processText',
        value: function processText(sentimentInput) {
            return new Promise(function (resolve, reject) {
                postRequest(getSentimentTextAnalysis(), sentimentInput).then(function (data) {
                    if (!isNil(data)) {
                        resolve(data);
                    } else {
                        reject(new Error('Couldn\'t get sentiment. Sentiment object is ', data));
                    }
                }).catch(function (err) {
                    return new Error(err);
                });
            });
        }
    }, {
        key: 'id',
        get: function get$$1() {
            return this._id;
        },
        set: function set$$1(id) {
            this._id = id;
        }
    }]);
    return Sentiment;
}();

var Twitter = function (_Mode) {
    inherits(Twitter, _Mode);

    function Twitter(name) {
        classCallCheck(this, Twitter);
        return possibleConstructorReturn(this, (Twitter.__proto__ || Object.getPrototypeOf(Twitter)).call(this, name));
    }

    createClass(Twitter, [{
        key: 'socketEmit',
        value: function socketEmit(socket, channel, params) {
            socket.emit(channel, params);
        }
    }, {
        key: 'getData',
        value: function getData(url, twitData) {
            return new Promise(function (res, rej) {
                postRequest(url, twitData).then(function (data) {
                    res(data);
                }).catch(function (err) {
                    rej(err);
                });
            });
        }
    }, {
        key: 'processSingle',
        value: function processSingle(tweet) {
            return {
                text: tweet.text,
                created_at: tweet.created_at,
                geo: tweet.place.bounding_box.coordinates[0][0], // [lat, long]
                location: tweet.place.full_name + ', ' + tweet.place.country,
                profileImage: tweet.user.profile_image_url || 'no-image',
                name: tweet.user.name,
                username: tweet.user.screen_name
            };
        }
    }, {
        key: 'processData',
        value: function processData(tweets, metadata) {
            var hasGeo = function hasGeo(tweet) {
                return !isNil(tweet.place);
            };
            var getRequredData = function getRequredData(tweet) {
                return {
                    text: tweet.text,
                    created_at: tweet.created_at,
                    geo: tweet.place.bounding_box.coordinates[0][0], // [lat, long]
                    location: tweet.place.full_name + ', ' + tweet.place.country,
                    profileImage: tweet.user.profile_image_url || 'no-image',
                    name: tweet.user.name,
                    username: tweet.user.screen_name
                };
            };

            var filteredTweetsList = pipe(filter(hasGeo), map(getRequredData))(tweets);

            return filteredTweetsList;
        }
    }]);
    return Twitter;
}(Mode);

var List = function () {
    function List(id, dataName) {
        classCallCheck(this, List);

        this.id = id;
        this.dataName = dataName;

        this.$self = $('<div id=' + id + ' class=\'list-group\' data-name=' + dataName + '></div>');
    }

    createClass(List, [{
        key: 'addClassesToAllItems',
        value: function addClassesToAllItems(classes) {
            this.$self.children().addClass(classes);
        }
    }, {
        key: 'addItem',
        value: function addItem(value, handler) {
            var child = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            this.$self.append('<li class=\'list-group-item\'><span> ' + value + ' </span></li>');
        }
    }, {
        key: 'bindTo',
        value: function bindTo(container) {
            if (getType(container) === '[object Object]') {
                return container.append(this.$self);
            }

            return $('' + container).append(this.$self);
        }
    }, {
        key: 'removeItem',
        value: function removeItem() {}
    }, {
        key: '$html',
        value: function $html() {
            return this.$self;
        }
    }, {
        key: 'toString',
        value: function toString() {
            return this.toString();
        }
    }, {
        key: 'id',
        get: function get$$1() {
            return this._id;
        },
        set: function set$$1(newId) {
            this._id = newId;
        }
    }, {
        key: 'dataName',
        get: function get$$1() {
            return this._dataName;
        },
        set: function set$$1(dataName) {
            this._dataName = dataName;
        }
    }]);
    return List;
}();

// Action
$(window).load(function () {

    // Statuc modules
    var storageSystem = new StorageSystem(window.localStorage);
    var twitter = new Twitter('twitter');
    var sentiment = new Sentiment('social_media');
    var leaflet = new Leaflet();

    // Dynamic modules
    var rightComponents = new Components();

    // Constants
    var TWITTER_MODES = MAIN.TWITTER_MODES;
    var TWITTER_MODES_INDEX = MAIN.TWITTER_MODES_INDEX;

    // connecting to socket
    var socket = io.connect('http://localhost:8000/');

    // other variables used throughout the code
    var cpOpen = void 0,
        tracker = void 0,
        cpRightList = [];

    /* INTRO LOADER CODE */
    $(function () {
        if (!storageSystem.getItem('firstVisit')) {
            fadeOut('#initLoader', 3000, function () {
                removeElement('#initLoader');
                makeVisible('#mainWrapper', 500);
            });
        } else {
            fadeOut('#initLoader', 550, function () {
                removeElement('#initLoader');
                makeVisible('#mainWrapper', 500);
            });
        }
    });

    storageSystem.setItem('firstVisit', true);
    cpOpen = storageSystem.getItem('cpOpen');
    if (cpOpen == 'false') {
        console.log("Should slide: cpOpen", cpOpen);
        slideToggleCp('controlPanelWrapper', Map);
    }

    addEventListenerTo('toggleSliderBtn', 'click', function (event) {
        return slideToggleCp('controlPanelWrapper', Map);
    });

    new L.Control.GPlaceAutocomplete({
        position: 'topright',
        callback: function callback(location) {
            console.log('Location given:', location);
            var lat = location.geometry.location.lat();
            var lng = location.geometry.location.lng();

            // const sanFrancisco = [ '-122.75, 36.8, -121.75, 37.8' ];
            var lastLocation = [lng + ', ' + lat + ', ' + (lng + 1) + ', ' + (lat + 1)];

            storageSystem.setRawItem('lastLocation', lastLocation);
            Map.setView([lat, lng], 8, { animate: true, duration: 2.0 });
        }
    }).addTo(Map);

    socket.on('tweet', function (tweet) {
        var coordinates = tweet.place ? tweet.place.bounding_box.coordinates[0][1] : null;
        if (coordinates) {
            var boundingBox = tweet.place.bounding_box;
            var polygonCenter = leaflet.computePolygonCenter(L, boundingBox);
            var _coordinates = leaflet.transformLatLngToArray(polygonCenter);
            var user = tweet.user;
            var text = tweet.text;
            var id = tweet.id;
            var created_at = tweet.created_at;
            var mlsTime = tweet.timestamp_ms;

            var data = twitter.processSingle(tweet);

            // 1. Process sentiment based on passed text
            // 2. Draw an object with metadata on the map
            //    and also draw it on the panel (panel is for future work).
            sentiment.processText({ text: text }).then(function (data) {
                console.log('Coordinates form that passed:', _coordinates);
                data.geo = _coordinates;
                var renderObject$$1 = {
                    data: data,
                    sentiment: sentiment,
                    type: 'twitter'
                };

                renderObject(renderObject$$1);
            });
        } else {
            console.log('Passed tweet with no coordinates', tweet);
        }
    });

    function getInfoBasedOnChosenMode(mode, query, lastLocation, twitData) {
        switch (mode) {
            case 'real_time':
                twitter.socketEmit(socket, 'topic', { topic: query, location: lastLocation });
                break;
            case 'specified_time':
                twitter.getData(getTwitData(), twitData).then(function (data) {
                    return console.log(data);
                }).catch(function (err) {
                    return new Error('err', err);
                });
                break;
            default:
                console.log('none of the modes selected');

        }
    }

    onSubmit('#querySearchForm', function (e) {
        e.preventDefault();
        var query = getInputValue('#querySearch');
        var lat = Map.getCenter().lat;
        var lng = Map.getCenter().lng;
        var twitData = { q: query, geocode: [lat, lng], radius: '25mi' };

        var lastLocation = [lng + ', ' + lat + ', ' + (lng + 1) + ', ' + (lat + 1)];

        if (isNil(storageSystem.getItem('lastLocation'))) {
            console.log('Not selected. twitData:', twitData);
            // const testTwitDataItemTest = {q: 'trump', geocode: [37.7749, -122.4194], radius: '25mi'};

            getInfoBasedOnChosenMode('real_time', query, lastLocation, twitData);
        } else {
            console.log('Exists', lastLocation);

            /**
                 TODO:
                - This is for General and Selective timing
                - Get data points and draw them on the map
              */
            // const first = MapOps.generateResults([1, 2, 3, 4]);
            // first(lastLocation);

            /**
                 TODO:
                - This portion of code is for Socket.io/real time tweet streaming
                - Get location and query and start connecting to the socket
              */
            getInfoBasedOnChosenMode('specified_time', query, lastLocation, twitData);
        }

        // last location is saved
        storageSystem.setRawItem('lastLocation', lastLocation);

        // once query selected:
        // check if location is already selected
        // if yes, then go to that location
        //          and show the results
        // if no, then get the center of the current
        //        location of the screen and show the results.
        //
    });

    // generation
    // ui.generateCpRightPanel('#panelWrapper', {});

    // Testing area
    var testGeo = '-25.2744,-133.7751'; // Australia
    // console.log('Path:', Paths.getGeoTrends(testGeo));
    console.log(getGeoTrends(testGeo));
    getRequest(getGeoTrends(testGeo)).then(function (data) {
        if (data.data) {
            var listOfTrends = data.data.trends;
            var geoData = data.geo;

            $("#querySearch").easyAutocomplete({
                data: listOfTrends,
                getValue: 'name',
                list: {
                    match: {
                        enabled: true
                    },
                    onShowListEvent: function onShowListEvent() {
                        switch (storageSystem.getItem('cpOpen')) {
                            case 'false':
                                addClass('.easy-autocomplete-container', 'autocomplete-top');
                                break;
                            case 'true':
                                removeClass('.easy-autocomplete-container', 'autocomplete-top');
                                break;
                            default:
                                removeClass('.easy-autocomplete-container', 'autocomplete-top');
                        }
                    },
                    onKeyEnterEvent: function onKeyEnterEvent() {}
                }
                // template: {
                //     type: "custom"
                //     // method: function(value, item) {
                //     //     return "<img src='" + item.icon + "' /> | " + item.type + " | " + value;
                //     // }
                // }
            });
        } else {
            console.log("no data", data);
        }

        var panelComp1 = new PanelComponent('#topTen', 'Top 10 Tweets', function () {
            console.log('hi');
        }, [{ 'name': 'daler' }, { 'name': 'michael' }]);
        var panelComp2 = new PanelComponent('#topTwenty', 'Top 10 Retweets', function () {
            console.log('hi');
        }, [{ 'lastname': 'asrorov' }, { 'lastname': 'jojo' }]);
        var panelComp3 = new PanelComponent('#topThirty', 'Top 30 Retweets', function () {
            console.log('hi');
        }, [{ 'jorge': 'quero' }, { 'sandro': 'bolo' }]);

        rightComponents.add(panelComp1);
        rightComponents.add(panelComp2);
        rightComponents.add(panelComp3);
        rightComponents.setName('Social Media');
        rightComponents.setId('socMedia');

        console.log("panelComp object:", rightComponents);
        appendDropDownToPanel('#panelCompRightWrapper', rightComponents);
    }).catch(function (err) {
        console.log("Error request", err);
    });

    var arrayOfIndexes = TWITTER_MODES.map(function (item, index) {
        return index;
    });
    var arrayOfLabels = TWITTER_MODES.map(function (mode) {
        return titleCase(mode.split('_').join(' '));
    });
    appendRangeSlider('#panelCompMiddle', 'range-selector', 'twitterModes', {
        ticks: arrayOfIndexes,
        ticksLabels: arrayOfLabels,
        min: arrayOfIndexes[0],
        max: arrayOfIndexes[arrayOfIndexes.length - 1],
        step: 1,
        value: arrayOfIndexes[0],
        tooltip: 'hide',
        eventHandlers: {
            change: function change(slideEvt) {
                var newMode = slideEvt.value.newValue;
                var prevMode = slideEvt.value.oldValue;
                switch (newMode) {
                    case TWITTER_MODES_INDEX['real_time']:
                        break;
                    case TWITTER_MODES_INDEX['specified_time']:
                        // check the cache
                        // if location data already exists
                        //      return location from cache
                        // else
                        //      store location in cache in (key, value) pair where key is location and value is tweets
                        //      return location
                        var query = getInputValue('#querySearch');
                        var lat = Map.getCenter().lat;
                        var lng = Map.getCenter().lng;
                        var twitData = { q: query, geocode: [lat, lng], radius: '25mi' };

                        twitter.getData(getTwitData(), twitData).then(function (data) {
                            var _ref = [data.statuses, data.search_metadata],
                                statuses = _ref[0],
                                searchMetadata = _ref[1];


                            var filteredTweets = twitter.processData(statuses, searchMetadata);

                            filteredTweets.forEach(function (data) {
                                sentiment.processText({ text: data.text }).then(function (sentiment) {
                                    return new Promise(function (resolve, reject) {
                                        return resolve({ sentiment: sentiment, data: data, type: 'twitter' });
                                    });
                                }).then(function (renderObject$$1) {
                                    renderObject(renderObject$$1);
                                });
                            });

                            console.log(filteredTweets);
                        }).catch(function (err) {
                            return console.log('getData() - ', err);
                        });

                        break;
                    default:
                        console.log('none selected');

                }
                console.log('Event: change. Slider object', slideEvt);
            }
        }
    });

    var contextMenu = addContextMenuTo('#mapWrapper', '#mapContextMenu', 'contextmenu');
    contextMenu.bind();
    contextMenu.hide();

    var list = new List('contextMenuList', 'contextMenuList');
    list.bindTo(contextMenu.$html());
    list.addItem('One', function () {
        return console.log('One');
    });
    list.addItem('Two', function () {
        return console.log('Two');
    });
    list.addItem('Three', function () {
        return console.log('Three');
    });
    list.addClassesToAllItems('classOne classTwo');

    // contextMenu.fadeOut();

    console.log('Context menu in main.js', contextMenu);

    // Request.getRequest(Utils.getTrendsPlaces(lat, long))å
    //     .then((data) => {
    //         console.log("Trends Data");
    //     })

    // post request testing

});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
