(function () {
'use strict';

// Initializing the map
// let mainMap = L.map('mapWrapper').setView([51.505, -0.09], 13);

// L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//     maxZoom: 19,
//     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
// }).addTo(mainMap);

var mapLayer = MQ.mapLayer();
var mainMap = void 0;

mainMap = L.map('mapWrapper', {
  layers: mapLayer,
  center: [40.731701, -73.993411],
  zoom: 12
});

L.control.layers({
  'Map': mapLayer,
  'Hybrid': MQ.hybridLayer(),
  'Satellite': MQ.satelliteLayer(),
  'Dark': MQ.darkLayer(),
  'Light': MQ.lightLayer()
}).addTo(mainMap);

var Map = mainMap;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var StorageSystem = function () {
    function StorageSystem(localStorage) {
        classCallCheck(this, StorageSystem);

        this._localStorage = localStorage;
    }

    createClass(StorageSystem, [{
        key: "getItem",
        value: function getItem(key) {
            return this._localStorage.getItem(key);
        }
    }, {
        key: "setItem",
        value: function setItem(key, value) {
            this._localStorage.setItem(key, value);
        }
    }]);
    return StorageSystem;
}();

// UI Utils set
function slideToggleCp(targetID, map) {
    var heightSetterID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'arrowPointerWrapper';
    var cpDefaultHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "35%";

    var cpNavHeight = document.getElementById(heightSetterID).offsetHeight.toString();
    var cpWrapperHeight = document.getElementById(targetID).offsetHeight.toString();
    var slidingTime = 270;
    var defaultTop = "-15px";
    var $querySearchForm = $('#querySearchForm');
    var $target = $('#' + targetID);
    var $body = $('body');
    var $slideSwitchIcon = $('#slideSwitchIcon');

    var storageSystem = new StorageSystem(window.localStorage);

    //
    if (cpWrapperHeight === cpNavHeight) {
        $body.css({ "overflowY": "auto" });
        $target.animate({ height: cpDefaultHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-15px"
        }, slidingTime);
        $slideSwitchIcon.addClass('fa-caret-down').removeClass('fa-caret-up');
        storageSystem.setItem("cpOpen", true);
    } else {
        $body.css({ "overflowY": "hidden" });
        $target.animate({ height: cpNavHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-37px"
        }, slidingTime);
        map.invalidateSize();
        $slideSwitchIcon.addClass('fa-caret-up').removeClass('fa-caret-down');
        storageSystem.setItem("cpOpen", false);
    }
}

/**
*  Helper UI method that will keep the
*  control panel closed faster.
*/


/**
*   Based on the given target (div) and data (list of
*   available options), place a table (or list) of
*   widgets.
*/








function addClass(target, className) {
    $(target).addClass(className);
}



function removeClass(target, className) {
    $(target).removeClass(className);
}

// export function fadeOut(target, type, callbackHandler = function(){}) {
//     $(target).fadeOut(type, callbackHandler);
// }

function addEventListenerTo(target, type, fn) {
    document.getElementById(target).addEventListener(type, fn);
}

function removeElement(target) {
    $(target).remove();
}



function fadeOut(target, timer, callback) {
    $(target).fadeOut(timer, function () {
        // $('#initLoader').remove();
        // $('#mainWrapper').css({opacity: 0.0, visibility: "visible"}).animate({opacity: 1}, 1000);
        callback();
    });
}

function makeVisible(target, timer) {
    $(target).css({ opacity: 0.0, visibility: "visible" }).animate({ opacity: 1 }, timer);
}

function appendDropDownTo(target, dropdownName, dropdownID, actionsList) {
    // console.log("HERE", dropdownName, " HERE ", dropdownID, " HERE ", actionsList);
    var $targetRef = $(target).append('<div class="dropdown" id=' + dropdownID + '></div>');
    var $dropdown = $(target).find('#' + dropdownID);
    $dropdown.append('<button class=\'btn btn-secondary dropdown-toggle\' type=\'button\' data-toggle="dropdown">' + dropdownName + '</button>');
    var $dropdownRef = $dropdown.append('<div class=\'dropdown-menu\' </div>');
    var $listDiv = $dropdownRef.find('.dropdown-menu');

    actionsList.map(function (action, index) {
        $listDiv.append('\n            <a class =\'dropdown-item\' id=\'' + action.id + '\' href=\'#\'> ' + action.name + ' </a>\n        ');
    });
    $dropdown.append($listDiv);
    $(target).append($dropdown);
}



function appendDropDownToPanel(target, componentsClass) {
    console.log("componentsClass.list:", componentsClass.list);
    appendDropDownTo(target, componentsClass.name, componentsClass.id, componentsClass.list);
}

function onSubmit(target, callback) {
    $(target).submit(callback);
}

function getInputValue(target) {
    return $(target).val();
}

function getRequest(url) {
    return new Promise(function (res, rej) {
        $.get(url, function (data, status) {

            if (status === 'success') {
                console.log("Success");
                res(data);
            } else {
                rej("Couldn't get the file.");
            }
        });
    });
}

function getGeoTrends(latLongString) {
    return window.location.origin + "/api/twitter/geotrends/" + latLongString;
}

/**
 *
 * Control class for handing control panel events
 *
 */

var PanelComponent = function () {
    function PanelComponent(id, name, actionHandler) {
        var data = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
        classCallCheck(this, PanelComponent);

        this.id = id;
        this.name = name;
        this.actionHandler = actionHandler;
        this.data = data;
    }

    createClass(PanelComponent, [{
        key: "getSotedDataBy",
        value: function getSotedDataBy(key) {
            var ascending = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

            var sortedData = void 0;
            var descComparator = R.comparator(function (a, b) {
                return R.gt(R.prop(key, a), R.prop(key, b));
            });

            sortedData = ascending ? R.sortBy(R.prop(key), this.data) : R.sort(descComparator, this.data);
            return data;
        }
    }, {
        key: "getTopN",
        value: function getTopN(limit, key) {
            var ascending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

            var formatted = getSortedDataBy(key, ascending);
            return R.slice(0, limit + 1, formatted);
        }
    }, {
        key: "getActionHandler",
        value: function getActionHandler() {
            return this.actionHandler;
        }
    }, {
        key: "getData",
        value: function getData() {
            return this.data;
        }
    }, {
        key: "getId",
        value: function getId() {
            return this.id;
        }
    }, {
        key: "getName",
        value: function getName(name) {
            this.name = name;
        }
    }, {
        key: "setActionHandler",
        value: function setActionHandler(actionHandler) {
            this.actionHandler = actionHandler;
        }
    }, {
        key: "setActionHandler",
        value: function setActionHandler(fn) {
            this.actionHandler = fn;
        }
    }, {
        key: "setData",
        value: function setData(data) {
            this.data = data;
        }
    }, {
        key: "setName",
        value: function setName(name) {
            this.name = name;
        }
    }, {
        key: "toString",
        value: function toString() {
            return {
                "id": this.id,
                "name": this.name,
                "actionHandler": this.actionHandler,
                "data": this.data
            };
        }
    }]);
    return PanelComponent;
}();

var Components = function () {
    function Components() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
        var list = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
        classCallCheck(this, Components);

        this.id = id;
        this.name = name;
        this.list = list;
    }

    createClass(Components, [{
        key: "add",
        value: function add(panelComponent) {
            this.list.push(panelComponent);
        }
    }, {
        key: "get",
        value: function get$$1() {
            return this;
        }
    }, {
        key: "getId",
        value: function getId() {
            return this.id;
        }
    }, {
        key: "getName",
        value: function getName() {
            return this.name;
        }
    }, {
        key: "getList",
        value: function getList() {
            return this.list;
        }
    }, {
        key: "set",
        value: function set$$1(id, name, list) {
            this.id = id;
            this.name = name;
            this.list = list;
        }
    }, {
        key: "setName",
        value: function setName(name) {
            this.name = name;
        }
    }, {
        key: "setId",
        value: function setId(id) {
            this.id = id;
        }
    }, {
        key: "setList",
        value: function setList(list) {
            this.list = list;
        }
    }, {
        key: "toString",
        value: function toString() {
            return {
                id: this.id,
                name: this.name,
                list: this.list
            };
        }
    }]);
    return Components;
}();

var IMAGES = {

    SOC_MEDIA_ICONS: {
        TWITTER: '../../img/icons/twitter_i.png',
        YELP: '',
        FOURSQARE: ''
    }
};

// export function generateResults(data) {
//     console.log('Data', data);
// }

// export function animateTransition(data) {
//     console.log("")
// }

var generateResults = R.curry(function (data, geo) {
    R.pipe(R.map(drawPoint))(data);
});

var drawPoint = R.curry(function (pointData) {
    // console.log('data', pointData);
    // console.log('CONSTANTS: ', IMAGES.SOC_MEDIA_ICONS.TWITTER);
    var twitterIcon = L.icon({
        iconUrl: IMAGES.SOC_MEDIA_ICONS.TWITTER,
        shadowUrl: IMAGES.SOC_MEDIA_ICONS.TWITTER,

        iconSize: [38, 95], // size of the icon
        shadowSize: [50, 64], // size of the shadow
        iconAnchor: [22, 94], // point of the icon which will correspond to marker's location
        shadowAnchor: [4, 62], // the same for the shadow
        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
    });

    L.marker([51.5, -0.09], { icon: twitterIcon }).addTo(Map);
});

// Action
$(window).load(function () {
    var storageSystem = new StorageSystem(window.localStorage);
    var socket = io.connect('http://localhost:8000/');
    var cpOpen = void 0,
        tracker = void 0,
        cpRightList = [];

    var rightComponents = new Components();

    /* INTRO LOADER CODE */
    $(function () {
        if (!storageSystem.getItem('firstVisit')) {
            fadeOut('#initLoader', 3000, function () {
                removeElement('#initLoader');
                makeVisible('#mainWrapper', 500);
            });
        } else {
            fadeOut('#initLoader', 550, function () {
                removeElement('#initLoader');
                makeVisible('#mainWrapper', 500);
            });
        }
    });

    storageSystem.setItem('firstVisit', true);

    cpOpen = storageSystem.getItem('cpOpen');
    console.log('cpOpen:::', cpOpen);
    if (cpOpen == 'false') {
        console.log("Should slide: cpOpen", cpOpen);
        slideToggleCp('controlPanelWrapper', Map);
    }

    

    addEventListenerTo('toggleSliderBtn', 'click', function (event) {
        return slideToggleCp('controlPanelWrapper', Map);
    });

    // let input = document.getElementById('pac-input')
    new L.Control.GPlaceAutocomplete({
        position: 'topright',
        callback: function callback(location) {
            // object of google place is given
            console.log('Location given:', location);
            var lat = location.geometry.location.lat();
            var lng = location.geometry.location.lng();
            Map.setView([lat, lng], 8, { animate: true, duration: 2.0 });
        }
    }).addTo(Map);

    socket.on('tweet', function (tweet) {
        console.log('Tweet: ', tweet);
    });

    onSubmit('#querySearchForm', function (e) {
        e.preventDefault();
        var query = getInputValue('#querySearch');
        var lat = Map.getCenter().lat;
        var lng = Map.getCenter().lng;

        console.log('Geo: ' + lat + ', ' + lng + '...');

        if (R.isNil(storageSystem.getItem('locationSelected'))) {
            console.log('Not selected');
            storageSystem.setItem('locationSelected', true);
        } else {
            console.log('Exists', storageSystem.getItem('locationSelected'));
            var first = generateResults([1, 2, 3, 4]);
            first({ lat: lat, lng: lng });
        }

        // once query selected:
        // check if location is already selected
        // if yes, then go to that location
        //          and show the results
        // if no, then get the center of the current
        //        location of the screen and show the results.
        //
    });

    // generation
    // ui.generateCpRightPanel('#panelWrapper', {});

    // Testing area
    var testGeo = '-25.2744,-133.7751'; // Australia
    // console.log('Path:', Paths.getGeoTrends(testGeo));
    console.log(getGeoTrends(testGeo));
    getRequest(getGeoTrends(testGeo)).then(function (data) {
        if (data.data) {
            var listOfTrends = data.data.trends;
            var geoData = data.geo;

            $("#querySearch").easyAutocomplete({
                data: listOfTrends,
                getValue: 'name',
                list: {
                    match: {
                        enabled: true
                    },
                    onShowListEvent: function onShowListEvent() {
                        // switch(storageSystem.getItem('cpOpen')) {
                        //     case 'false':
                        //        $('.easy-autocomplete-container').addClass('autocomplete-top');
                        //        break;
                        //     case 'true':
                        //        $('.easy-autocomplete-container').removeClass('autocomplete-top');
                        //        break;
                        //     default:
                        //        $('.easy-autocomplete-container').removeClass('autocomplete-top');
                        // };
                        switch (storageSystem.getItem('cpOpen')) {
                            case 'false':
                                addClass('.easy-autocomplete-container', 'autocomplete-top');
                                break;
                            case 'true':
                                removeClass('.easy-autocomplete-container', 'autocomplete-top');
                                break;
                            default:
                                removeClass('.easy-autocomplete-container', 'autocomplete-top');
                        }
                    },
                    onKeyEnterEvent: function onKeyEnterEvent() {}
                }
                // template: {
                //     type: "custom"
                //     // method: function(value, item) {
                //     //     return "<img src='" + item.icon + "' /> | " + item.type + " | " + value;
                //     // }
                // }
            });
        } else {
            console.log("no data", data);
        }

        // (function() {
        //     // for(let i = 0; i < 10; i++) {
        //     //     ui.addElementToPanel
        //     //     (
        //     //         '#panelCompRightWrapper',
        //     //         {},
        //     //         "Button " + i,
        //     //         $('<a></a>'),
        //     //         'menu btn btn-secondary',
        //     //         'col-lg-4'
        //     //     );
        //     // }

        //     // undefined by default will place 'div' element

        //     // ui.addElementTo('')

        // }());

        // console.log('Should reach here...');
        // let dropdown = ui.addContainerToContainer('#panelCompRightWrapper', 'favorites', undefined, 'dropdown show');
        // let $a = ui.addContainerToContainer(dropdown.attr('id'), undefined, $('<a>'), 'btn btn-secondary dropdown-toggle');
        // ui.addTextTo($a, $a.attr('id'));

        //target, dropdownName, dropdownID, dataList


        var panelComp1 = new PanelComponent('#topTen', 'Top 10 Tweets', function () {
            console.log('hi');
        }, [{ "name": "daler" }, { "name": "michael" }]);
        var panelComp2 = new PanelComponent('#topTwenty', 'Top 10 Retweets', function () {
            console.log('hi');
        }, [{ "lastname": "asrorov" }, { "lastname": "jojo" }]);
        rightComponents.add(panelComp1);
        rightComponents.add(panelComp2);
        rightComponents.setName('Social Media');
        rightComponents.setId('socMedia');

        console.log("panelComp object:", rightComponents);
        appendDropDownToPanel('#panelCompRightWrapper', rightComponents);
    }).catch(function (err) {
        console.log("Error request", err);
    });

    // Request.getRequest(Utils.getTrendsPlaces(lat, long))
    //     .then((data) => {
    //         console.log("Trends Data");
    //     })
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
