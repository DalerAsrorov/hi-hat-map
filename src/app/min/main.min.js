(function () {
'use strict';

// Initializing the map
// let mainMap = L.map('mapWrapper').setView([51.505, -0.09], 13);

// L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//     maxZoom: 19,
//     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
// }).addTo(mainMap);

var mapLayer = MQ.mapLayer();
var mainMap = void 0;

mainMap = L.map('mapWrapper', {
  layers: mapLayer,
  center: [40.731701, -73.993411],
  zoom: 12
});

L.control.layers({
  'Map': mapLayer,
  'Hybrid': MQ.hybridLayer(),
  'Satellite': MQ.satelliteLayer(),
  'Dark': MQ.darkLayer(),
  'Light': MQ.lightLayer()
}).addTo(mainMap);

var Map = mainMap;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var StorageSystem = function () {
    function StorageSystem(localStorage) {
        classCallCheck(this, StorageSystem);

        this._localStorage = localStorage;
    }

    createClass(StorageSystem, [{
        key: "getItem",
        value: function getItem(key) {
            return this._localStorage.getItem(key);
        }
    }, {
        key: "setItem",
        value: function setItem(key, value) {
            this._localStorage.setItem(key, value);
        }
    }]);
    return StorageSystem;
}();

// UI Utils set
function slideToggleCp(targetID, map) {
    var heightSetterID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'arrowPointerWrapper';
    var cpDefaultHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "35%";

    var cpNavHeight = document.getElementById(heightSetterID).offsetHeight.toString();
    var cpWrapperHeight = document.getElementById(targetID).offsetHeight.toString();
    var slidingTime = 270;
    var defaultTop = "-15px";
    var $querySearchForm = $('#querySearchForm');
    var $target = $('#' + targetID);
    var $body = $('body');
    var $slideSwitchIcon = $('#slideSwitchIcon');

    var storageSystem = new StorageSystem(window.localStorage);

    //
    if (cpWrapperHeight === cpNavHeight) {
        $body.css({ "overflowY": "auto" });
        $target.animate({ height: cpDefaultHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-15px"
        }, slidingTime);
        $slideSwitchIcon.addClass('glyphicon-menu-down').removeClass('glyphicon-menu-up');
        storageSystem.setItem("cpOpen", true);
    } else {
        $body.css({ "overflowY": "hidden" });
        $target.animate({ height: cpNavHeight }, slidingTime);
        $querySearchForm.animate({
            top: "-34px"
        }, slidingTime);
        map.invalidateSize();
        $slideSwitchIcon.addClass('glyphicon-menu-up').removeClass('glyphicon-menu-down');
        storageSystem.setItem("cpOpen", false);
    }
}

/**
*  Helper UI method that will keep the
*  control panel closed faster.
*/

function getRequest(url) {
    return new Promise(function (res, rej) {
        $.get(url, function (data, status) {

            if (status === 'success') {
                console.log("Success");
                res(data);
            } else {
                rej("Couldn't get the file.");
            }
        });
    });
}

function getGeoTrends(latLongString) {
    return window.location.origin + "/api/twitter/geotrends/" + latLongString;
}

// Action
window.onload = function (e) {
    e.preventDefault();
    var storageSystem = new StorageSystem(window.localStorage);
    var socket = io.connect('http://localhost:8000/');
    var cpOpen = void 0;

    // if(storageSystem.getItem('cpOpen'));
    cpOpen = storageSystem.getItem('cpOpen');
    console.log('cpOpen:::', cpOpen);
    if (cpOpen == 'false') {
        console.log("Should slide: cpOpen", cpOpen);
        slideToggleCp('controlPanelWrapper', Map);
    }

    

    $('#toggleSliderBtn').on('click', function (event) {
        console.log('CLICKED');
        slideToggleCp('controlPanelWrapper', Map);
    });

    // let input = document.getElementById('pac-input')
    new L.Control.GPlaceAutocomplete({
        position: 'topright',
        callback: function callback(location) {
            // object of google place is given
            console.log('Location given:', location);
            Map.panTo(location);
        }
    }).addTo(Map);

    socket.on('tweet', function (tweet) {
        console.log('Tweet: ', tweet);
    });

    // Testing area
    var testGeo = '-25.2744,-133.7751'; // Australia
    // console.log('Path:', Paths.getGeoTrends(testGeo));
    console.log(getGeoTrends(testGeo));
    getRequest(getGeoTrends(testGeo)).then(function (data) {
        // const trendsArray = data.data.trends;
        // const trendsNameArray = trendsArray.map((trend) => trend.name);

        if (data.data) {
            var listOfTrends = data.data.trends;
            var geoData = data.geo;
            // console.log("Geo Data:", geoData);
            // console.log("Trends:", listOfTrends);

            $("#querySearch").easyAutocomplete({
                data: listOfTrends,
                getValue: 'name',
                list: {
                    match: {
                        enabled: true
                    },
                    onShowListEvent: function onShowListEvent() {
                        // if(storageSystem.getItem('cpOpen') == 'false') {
                        //     $('.easy-autocomplete-container').addClass('autocomplete-top');
                        // } else {
                        //     $('.easy-autocomplete-container').removeClass('autocomplete-top');
                        // }
                        switch (storageSystem.getItem('cpOpen')) {
                            case 'false':
                                $('.easy-autocomplete-container').addClass('autocomplete-top');
                                break;
                            case 'true':
                                $('.easy-autocomplete-container').removeClass('autocomplete-top');
                                break;
                            default:
                                $('.easy-autocomplete-container').removeClass('autocomplete-top');
                        }
                    }
                }
                // template: {
                //     type: "custom"
                //     // method: function(value, item) {
                //     //     return "<img src='" + item.icon + "' /> | " + item.type + " | " + value;
                //     // }
                // }
            });
        } else {
            console.log("no data", data);
        }

        // console.log(trendsNameArray);
    }).catch(function (err) {
        console.log("Error request", err);
    });

    // Request.getRequest(Utils.getTrendsPlaces(lat, long))
    //     .then((data) => {
    //         console.log("Trends Data");
    //     })
};

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uL2pzL21hcC5qcyIsIi4uL2pzL3N0b3JhZ2VzeXN0ZW0uanMiLCIuLi9qcy91aS5qcyIsIi4uL2pzL3JlcXVlc3QuanMiLCIuLi9qcy9wYXRocy5qcyIsIi4uL2pzL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBJbml0aWFsaXppbmcgdGhlIG1hcFxuLy8gbGV0IG1haW5NYXAgPSBMLm1hcCgnbWFwV3JhcHBlcicpLnNldFZpZXcoWzUxLjUwNSwgLTAuMDldLCAxMyk7XG5cbi8vIEwudGlsZUxheWVyKCdodHRwOi8ve3N9LnRpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nJywge1xuLy8gICAgIG1heFpvb206IDE5LFxuLy8gICAgIGF0dHJpYnV0aW9uOiAnJmNvcHk7IDxhIGhyZWY9XCJodHRwOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL2NvcHlyaWdodFwiPk9wZW5TdHJlZXRNYXA8L2E+J1xuLy8gfSkuYWRkVG8obWFpbk1hcCk7XG5cbmxldCBtYXBMYXllciA9IE1RLm1hcExheWVyKCksIG1haW5NYXA7XG5cbm1haW5NYXAgPSBMLm1hcCgnbWFwV3JhcHBlcicsIHtcbiAgICBsYXllcnM6IG1hcExheWVyLFxuICAgIGNlbnRlcjogWyA0MC43MzE3MDEsIC03My45OTM0MTEgXSxcbiAgICB6b29tOiAxMlxufSk7XG5cbkwuY29udHJvbC5sYXllcnMoe1xuICAnTWFwJzogbWFwTGF5ZXIsXG4gICdIeWJyaWQnOiBNUS5oeWJyaWRMYXllcigpLFxuICAnU2F0ZWxsaXRlJzogTVEuc2F0ZWxsaXRlTGF5ZXIoKSxcbiAgJ0RhcmsnOiBNUS5kYXJrTGF5ZXIoKSxcbiAgJ0xpZ2h0JzogTVEubGlnaHRMYXllcigpXG59KS5hZGRUbyhtYWluTWFwKTtcblxuZXhwb3J0IGRlZmF1bHQgbWFpbk1hcDsiLCJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JhZ2VTeXN0ZW0ge1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsU3RvcmFnZSwgLi4ucmVzdCkge1xuICAgICAgICB0aGlzLl9sb2NhbFN0b3JhZ2UgPSBsb2NhbFN0b3JhZ2U7XG4gICAgfVxuXG4gICAgZ2V0SXRlbShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgfVxuXG4gICAgc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2xvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpO1xuICAgIH1cbn0iLCIvLyBVSSBVdGlscyBzZXRcbmltcG9ydCBTdG9yYWdlU3lzdGVtIGZyb20gJy4vc3RvcmFnZXN5c3RlbS5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzbGlkZVRvZ2dsZUNwKHRhcmdldElELCBtYXAsIGhlaWdodFNldHRlcklEID0gJ2Fycm93UG9pbnRlcldyYXBwZXInLCBjcERlZmF1bHRIZWlnaHQgPSBcIjM1JVwiLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgY3BOYXZIZWlnaHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoZWlnaHRTZXR0ZXJJRCkub2Zmc2V0SGVpZ2h0LnRvU3RyaW5nKCk7XG4gICAgY29uc3QgY3BXcmFwcGVySGVpZ2h0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SUQpLm9mZnNldEhlaWdodC50b1N0cmluZygpO1xuICAgIGNvbnN0IHNsaWRpbmdUaW1lID0gMjcwO1xuICAgIGNvbnN0IGRlZmF1bHRUb3AgPSBcIi0xNXB4XCI7XG4gICAgY29uc3QgJHF1ZXJ5U2VhcmNoRm9ybSA9ICQoJyNxdWVyeVNlYXJjaEZvcm0nKTtcbiAgICBjb25zdCAkdGFyZ2V0ID0gJChgIyR7dGFyZ2V0SUR9YCk7XG4gICAgY29uc3QgJGJvZHkgPSAkKCdib2R5Jyk7XG4gICAgY29uc3QgJHNsaWRlU3dpdGNoSWNvbiA9ICQoJyNzbGlkZVN3aXRjaEljb24nKTtcblxuICAgIGNvbnN0IHN0b3JhZ2VTeXN0ZW0gPSBuZXcgU3RvcmFnZVN5c3RlbSh3aW5kb3cubG9jYWxTdG9yYWdlKTtcblxuICAgIC8vXG4gICAgaWYoY3BXcmFwcGVySGVpZ2h0ID09PSBjcE5hdkhlaWdodCkge1xuICAgICAgICAkYm9keS5jc3Moe1wib3ZlcmZsb3dZXCI6IFwiYXV0b1wifSk7XG4gICAgICAgICR0YXJnZXQuYW5pbWF0ZSh7aGVpZ2h0OiBjcERlZmF1bHRIZWlnaHR9LCBzbGlkaW5nVGltZSk7XG4gICAgICAgICRxdWVyeVNlYXJjaEZvcm0uYW5pbWF0ZSh7XG4gICAgICAgICAgICB0b3A6IFwiLTE1cHhcIlxuICAgICAgICB9LCBzbGlkaW5nVGltZSk7XG4gICAgICAgICRzbGlkZVN3aXRjaEljb24uYWRkQ2xhc3MoJ2dseXBoaWNvbi1tZW51LWRvd24nKS5yZW1vdmVDbGFzcygnZ2x5cGhpY29uLW1lbnUtdXAnKTtcbiAgICAgICAgc3RvcmFnZVN5c3RlbS5zZXRJdGVtKFwiY3BPcGVuXCIsIHRydWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgJGJvZHkuY3NzKHtcIm92ZXJmbG93WVwiOiBcImhpZGRlblwifSk7XG4gICAgICAgICR0YXJnZXQuYW5pbWF0ZSh7aGVpZ2h0OiBjcE5hdkhlaWdodH0sIHNsaWRpbmdUaW1lKTtcbiAgICAgICAgJHF1ZXJ5U2VhcmNoRm9ybS5hbmltYXRlKHtcbiAgICAgICAgICAgIHRvcDogXCItMzRweFwiXG4gICAgICAgIH0sIHNsaWRpbmdUaW1lKTtcbiAgICAgICAgbWFwLmludmFsaWRhdGVTaXplKCk7XG4gICAgICAgICRzbGlkZVN3aXRjaEljb24uYWRkQ2xhc3MoJ2dseXBoaWNvbi1tZW51LXVwJykucmVtb3ZlQ2xhc3MoJ2dseXBoaWNvbi1tZW51LWRvd24nKTtcbiAgICAgICAgc3RvcmFnZVN5c3RlbS5zZXRJdGVtKFwiY3BPcGVuXCIsIGZhbHNlKTtcbiAgICB9XG59O1xuXG4vKipcbiogIEhlbHBlciBVSSBtZXRob2QgdGhhdCB3aWxsIGtlZXAgdGhlXG4qICBjb250cm9sIHBhbmVsIGNsb3NlZCBmYXN0ZXIuXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENwQ3NzKHRhcmdldCwgaGVpZ2h0LCBib2R5PSQoJ2JvZHknKSkge1xuICAgIGJvZHkuY3NzKHtcIm92ZXJmbG93WVwiOiBcImF1dG9cIn0pO1xuICAgICR0YXJnZXQuY3NzKHtoZWlnaHQ6IGNwRGVmYXVsdEhlaWdodH0pO1xufTsiLCJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXF1ZXN0KHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgICAgJC5nZXQodXJsLCAoZGF0YSwgc3RhdHVzKSA9PiB7XG5cbiAgICAgICAgICAgIGlmKHN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgIHJlcyhkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVqKFwiQ291bGRuJ3QgZ2V0IHRoZSBmaWxlLlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICB9KTtcbn07IiwiXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmVuZHNQYXRoKHdlaWQpIHtcbiAgICByZXR1cm4gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vYXBpL3R3aXR0ZXIvdHJlbmRzLyR7d2VpZH1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2VvVHJlbmRzKGxhdExvbmdTdHJpbmcpIHtcbiAgICByZXR1cm4gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vYXBpL3R3aXR0ZXIvZ2VvdHJlbmRzLyR7bGF0TG9uZ1N0cmluZ31gO1xufSIsImltcG9ydCBNYXAgZnJvbSAnLi9tYXAuanMnO1xuaW1wb3J0ICogYXMgdWkgZnJvbSAnLi91aS5qcyc7XG5pbXBvcnQgKiBhcyBSZXF1ZXN0IGZyb20gJy4vcmVxdWVzdC5qcyc7XG5pbXBvcnQgKiBhcyBQYXRocyBmcm9tICcuL3BhdGhzLmpzJztcbmltcG9ydCBTdG9yYWdlU3lzdGVtIGZyb20gJy4vc3RvcmFnZXN5c3RlbS5qcyc7XG5cbi8vIEFjdGlvblxud2luZG93Lm9ubG9hZCA9IChlKSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHN0b3JhZ2VTeXN0ZW0gPSBuZXcgU3RvcmFnZVN5c3RlbSh3aW5kb3cubG9jYWxTdG9yYWdlKTtcbiAgICBsZXQgc29ja2V0ID0gaW8uY29ubmVjdCgnaHR0cDovL2xvY2FsaG9zdDo4MDAwLycpO1xuICAgIGxldCBjcE9wZW47XG5cblxuICAgIC8vIGlmKHN0b3JhZ2VTeXN0ZW0uZ2V0SXRlbSgnY3BPcGVuJykpO1xuICAgIGNwT3BlbiA9IHN0b3JhZ2VTeXN0ZW0uZ2V0SXRlbSgnY3BPcGVuJyk7XG4gICAgY29uc29sZS5sb2coJ2NwT3Blbjo6OicsIGNwT3Blbik7XG4gICAgaWYoY3BPcGVuID09ICdmYWxzZScpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTaG91bGQgc2xpZGU6IGNwT3BlblwiLCBjcE9wZW4pO1xuICAgICAgICB1aS5zbGlkZVRvZ2dsZUNwKCdjb250cm9sUGFuZWxXcmFwcGVyJywgTWFwKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGdldFR3ZWV0cyhldmVudCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhgUmVhZHk6ICR7ZXZlbnR9YCk7XG4gICAgICAgIHNvY2tldC5lbWl0KCd0b3BpYycsIFwidHJ1bXBcIik7XG4gICAgfTtcblxuICAgICQoYCN0b2dnbGVTbGlkZXJCdG5gKS5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NMSUNLRUQnKTtcbiAgICAgICAgdWkuc2xpZGVUb2dnbGVDcCgnY29udHJvbFBhbmVsV3JhcHBlcicsIE1hcCk7XG4gICAgfSk7XG5cbiAgICAvLyBsZXQgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjLWlucHV0JylcbiAgICBuZXcgTC5Db250cm9sLkdQbGFjZUF1dG9jb21wbGV0ZSh7XG4gICAgICAgIHBvc2l0aW9uOiAndG9wcmlnaHQnLFxuICAgICAgICBjYWxsYmFjazogKGxvY2F0aW9uKSA9PiB7XG4gICAgICAgICAgICAvLyBvYmplY3Qgb2YgZ29vZ2xlIHBsYWNlIGlzIGdpdmVuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTG9jYXRpb24gZ2l2ZW46JywgbG9jYXRpb24pO1xuICAgICAgICAgICAgTWFwLnBhblRvKGxvY2F0aW9uKTtcblxuICAgICAgICB9XG4gICAgfSkuYWRkVG8oTWFwKTtcblxuICAgIHNvY2tldC5vbigndHdlZXQnLCAodHdlZXQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1R3ZWV0OiAnLCB0d2VldCk7XG4gICAgfSk7XG5cblxuICAgIC8vIFRlc3RpbmcgYXJlYVxuICAgIGxldCB0ZXN0R2VvID0gJy0yNS4yNzQ0LC0xMzMuNzc1MSc7IC8vIEF1c3RyYWxpYVxuICAgIC8vIGNvbnNvbGUubG9nKCdQYXRoOicsIFBhdGhzLmdldEdlb1RyZW5kcyh0ZXN0R2VvKSk7XG4gICAgY29uc29sZS5sb2coUGF0aHMuZ2V0R2VvVHJlbmRzKHRlc3RHZW8pKTtcbiAgICBSZXF1ZXN0LmdldFJlcXVlc3QoUGF0aHMuZ2V0R2VvVHJlbmRzKHRlc3RHZW8pKVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIC8vIGNvbnN0IHRyZW5kc0FycmF5ID0gZGF0YS5kYXRhLnRyZW5kcztcbiAgICAgICAgLy8gY29uc3QgdHJlbmRzTmFtZUFycmF5ID0gdHJlbmRzQXJyYXkubWFwKCh0cmVuZCkgPT4gdHJlbmQubmFtZSk7XG5cbiAgICAgICAgaWYoZGF0YS5kYXRhKSB7XG4gICAgICAgICAgICBsZXQgbGlzdE9mVHJlbmRzID0gZGF0YS5kYXRhLnRyZW5kcztcbiAgICAgICAgICAgIGxldCBnZW9EYXRhID0gZGF0YS5nZW87XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIkdlbyBEYXRhOlwiLCBnZW9EYXRhKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiVHJlbmRzOlwiLCBsaXN0T2ZUcmVuZHMpO1xuXG4gICAgICAgICAgICAkKFwiI3F1ZXJ5U2VhcmNoXCIpLmVhc3lBdXRvY29tcGxldGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IGxpc3RPZlRyZW5kcyxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZTogJ25hbWUnLFxuICAgICAgICAgICAgICAgIGxpc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb25TaG93TGlzdEV2ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmKHN0b3JhZ2VTeXN0ZW0uZ2V0SXRlbSgnY3BPcGVuJykgPT0gJ2ZhbHNlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICQoJy5lYXN5LWF1dG9jb21wbGV0ZS1jb250YWluZXInKS5hZGRDbGFzcygnYXV0b2NvbXBsZXRlLXRvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAkKCcuZWFzeS1hdXRvY29tcGxldGUtY29udGFpbmVyJykucmVtb3ZlQ2xhc3MoJ2F1dG9jb21wbGV0ZS10b3AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChzdG9yYWdlU3lzdGVtLmdldEl0ZW0oJ2NwT3BlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmFsc2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5lYXN5LWF1dG9jb21wbGV0ZS1jb250YWluZXInKS5hZGRDbGFzcygnYXV0b2NvbXBsZXRlLXRvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RydWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5lYXN5LWF1dG9jb21wbGV0ZS1jb250YWluZXInKS5yZW1vdmVDbGFzcygnYXV0b2NvbXBsZXRlLXRvcCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnLmVhc3ktYXV0b2NvbXBsZXRlLWNvbnRhaW5lcicpLnJlbW92ZUNsYXNzKCdhdXRvY29tcGxldGUtdG9wJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0ZW1wbGF0ZToge1xuICAgICAgICAgICAgICAgIC8vICAgICB0eXBlOiBcImN1c3RvbVwiXG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIG1ldGhvZDogZnVuY3Rpb24odmFsdWUsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIHJldHVybiBcIjxpbWcgc3JjPSdcIiArIGl0ZW0uaWNvbiArIFwiJyAvPiB8IFwiICsgaXRlbS50eXBlICsgXCIgfCBcIiArIHZhbHVlO1xuICAgICAgICAgICAgICAgIC8vICAgICAvLyB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibm8gZGF0YVwiLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRyZW5kc05hbWVBcnJheSk7XG5cbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgcmVxdWVzdFwiLCBlcnIpO1xuICAgIH0pO1xuXG4gICAgLy8gUmVxdWVzdC5nZXRSZXF1ZXN0KFV0aWxzLmdldFRyZW5kc1BsYWNlcyhsYXQsIGxvbmcpKVxuICAgIC8vICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCJUcmVuZHMgRGF0YVwiKTtcbiAgICAvLyAgICAgfSlcbn07XG5cblxuXG4iXSwibmFtZXMiOlsibWFwTGF5ZXIiLCJNUSIsIm1haW5NYXAiLCJMIiwibWFwIiwiY29udHJvbCIsImxheWVycyIsImh5YnJpZExheWVyIiwic2F0ZWxsaXRlTGF5ZXIiLCJkYXJrTGF5ZXIiLCJsaWdodExheWVyIiwiYWRkVG8iLCJTdG9yYWdlU3lzdGVtIiwibG9jYWxTdG9yYWdlIiwiX2xvY2FsU3RvcmFnZSIsImtleSIsImdldEl0ZW0iLCJ2YWx1ZSIsInNldEl0ZW0iLCJzbGlkZVRvZ2dsZUNwIiwidGFyZ2V0SUQiLCJoZWlnaHRTZXR0ZXJJRCIsImNwRGVmYXVsdEhlaWdodCIsImNwTmF2SGVpZ2h0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm9mZnNldEhlaWdodCIsInRvU3RyaW5nIiwiY3BXcmFwcGVySGVpZ2h0Iiwic2xpZGluZ1RpbWUiLCJkZWZhdWx0VG9wIiwiJHF1ZXJ5U2VhcmNoRm9ybSIsIiQiLCIkdGFyZ2V0IiwiJGJvZHkiLCIkc2xpZGVTd2l0Y2hJY29uIiwic3RvcmFnZVN5c3RlbSIsIndpbmRvdyIsImNzcyIsImFuaW1hdGUiLCJoZWlnaHQiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaW52YWxpZGF0ZVNpemUiLCJnZXRSZXF1ZXN0IiwidXJsIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsImdldCIsImRhdGEiLCJzdGF0dXMiLCJsb2ciLCJnZXRHZW9UcmVuZHMiLCJsYXRMb25nU3RyaW5nIiwibG9jYXRpb24iLCJvcmlnaW4iLCJvbmxvYWQiLCJlIiwicHJldmVudERlZmF1bHQiLCJzb2NrZXQiLCJpbyIsImNvbm5lY3QiLCJjcE9wZW4iLCJNYXAiLCJvbiIsImV2ZW50IiwiQ29udHJvbCIsIkdQbGFjZUF1dG9jb21wbGV0ZSIsInBhblRvIiwidHdlZXQiLCJ0ZXN0R2VvIiwiUGF0aHMiLCJ0aGVuIiwibGlzdE9mVHJlbmRzIiwidHJlbmRzIiwiZ2VvRGF0YSIsImdlbyIsImVhc3lBdXRvY29tcGxldGUiLCJjYXRjaCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7O0FBQ0E7Ozs7Ozs7O0FBUUEsSUFBSUEsV0FBV0MsR0FBR0QsUUFBSCxFQUFmO0lBQThCRSxnQkFBOUI7O0FBRUFBLFVBQVVDLEVBQUVDLEdBQUYsQ0FBTSxZQUFOLEVBQW9CO1VBQ2xCSixRQURrQjtVQUVsQixDQUFFLFNBQUYsRUFBYSxDQUFDLFNBQWQsQ0FGa0I7UUFHcEI7Q0FIQSxDQUFWOztBQU1BRyxFQUFFRSxPQUFGLENBQVVDLE1BQVYsQ0FBaUI7U0FDUk4sUUFEUTtZQUVMQyxHQUFHTSxXQUFILEVBRks7ZUFHRk4sR0FBR08sY0FBSCxFQUhFO1VBSVBQLEdBQUdRLFNBQUgsRUFKTztXQUtOUixHQUFHUyxVQUFIO0NBTFgsRUFNR0MsS0FOSCxDQU1TVCxPQU5UOztBQVFBLFVBQWVBLE9BQWY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDeEJxQlU7MkJBQ0xDLFlBQVosRUFBbUM7OzthQUMxQkMsYUFBTCxHQUFxQkQsWUFBckI7Ozs7O2dDQUdJRSxLQUFLO21CQUNGLEtBQUtELGFBQUwsQ0FBbUJFLE9BQW5CLENBQTJCRCxHQUEzQixDQUFQOzs7O2dDQUdJQSxLQUFLRSxPQUFPO2lCQUNYSCxhQUFMLENBQW1CSSxPQUFuQixDQUEyQkgsR0FBM0IsRUFBZ0NFLEtBQWhDOzs7Ozs7QUNYUjtBQUNBLEFBRUEsQUFBTyxTQUFTRSxhQUFULENBQXVCQyxRQUF2QixFQUFpQ2hCLEdBQWpDLEVBQWdIO1FBQTFFaUIsY0FBMEUsdUVBQXpELHFCQUF5RDtRQUFsQ0MsZUFBa0MsdUVBQWhCLEtBQWdCOztRQUM3R0MsY0FBY0MsU0FB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
